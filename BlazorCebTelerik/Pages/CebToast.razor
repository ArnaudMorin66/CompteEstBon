@using CompteEstBon
@using System.Threading;
@using System.ComponentModel
@using Telerik.Blazor
@using Telerik.Blazor.Components
@inject CebTirage tirage
<TelerikAnimationContainer @ref="@AnimationContainer"
                           AnimationType="@AnimationType.SlideUp"
                           ParentInlineStyle="transform: translate(-50%, -50%)"
                           Top="50%" Left="50%"
                           Height="auto"
                           Width="400px">
    <div class="bg-gradient-primary text-white w-100" style="cursor:pointer">
        @if (tirage.Status == CebStatus.CompteApproche || tirage.Status == CebStatus.CompteEstBon) {

            @if (tirage.Status == CebStatus.CompteEstBon) {
                <div class=" bg-gradient-success text-center text-uppercase font-weight-bold">
                    <div class="animation">
                        <i class="far fa-thumbs-up"></i>&nbsp;Compte est bon
                    </div>
                </div>
            } else {
                <div class="bg-gradient-warning text-center text-uppercase text-dark font-weight-bold">
                    <div class="animation">
                        <i class="text-danger far fa-thumbs-down"></i>&nbsp;Compte&nbsp;approché
                    </div>
                </div>

            }
            <div>&nbsp;</div>
            <div class="text-center">
                <div>Trouvé:&nbsp;@tirage.Found</div>
                @if (tirage.Status == CebStatus.CompteApproche) {
                    <div>&Eacute;cart:&nbsp;@tirage.Diff</div>
                }
                <div>@tirage.Solutions.Count&nbsp;solutions</div>
                <div>Durée:&nbsp;@($"{Duree:N3}")s</div>
            </div>
            <div>&nbsp;</div>
            <div class="text-center @(tirage.Status == CebStatus.CompteEstBon ? "bg-success text-white" : "bg-warning text-dark")">@Solution</div>

        }
    </div>
</TelerikAnimationContainer>;

@code {
    protected Timer timer;
    public TelerikAnimationContainer AnimationContainer { get; set; }

    public string Solution { get; set; }
    [Parameter]
    public double Duree { get; set; }
    [Parameter]
    public int DueTime { get; set; }

    protected override void OnInitialized() {
        timer = new Timer(new TimerCallback(async (state) => {
            await AnimationContainer.HideAsync();
        }));


    }

    public async Task ShowAsync(CebDetail detail = null) {
        if (detail == null) detail = tirage.Details[0];
        Solution = detail.ToString();
        await AnimationContainer.ShowAsync();
        timer.Change(DueTime, 0);

    }
    public async Task HideAsync() {
        await AnimationContainer.HideAsync();
    }

}
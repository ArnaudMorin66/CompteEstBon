@using CompteEstBon
@using System.Threading;
@using System.ComponentModel
@using Telerik.Blazor
@using Telerik.Blazor.Components
@inject CebTirage tirage
<TelerikAnimationContainer @ref="@AnimationContainer"
                           AnimationType="@AnimationType.SlideUp"
                           ParentInlineStyle="transform: translate(-50%, -50%)"
                           Top="50%" Left="50%"
                          
                           Height="auto"
                           Width="400px">
    <div class="bg-gradient-primary text-white w-100" style="cursor:pointer">
         @{
                string cls = "";
                string title = "";
                string icn = "";
                string rsl = "";
                switch (tirage.Status) {
                    case CebStatus.CompteEstBon:
                        title = "bg-gradient-success text-white";
                        cls = "bg-success text-white";
                        icn = "fa-thumbs-up text-white";
                        rsl = "Compte est bon";
                        break;
                    case CebStatus.CompteApproche:
                        title = "bg-gradient-warning text-dark";
                        icn = "fa-thumbs-down text-danger";
                        cls = "bg-warning text-dark";
                        rsl = "Compte approché";
                        break;
                    default:
                        return;
                }
                <div class="text-center text-uppercase font-weight-bold @title">
                            <div class="animation">
                                <i class="far @icn"></i>&nbsp;@rsl
                            </div>
                        </div>
                <div>&nbsp;</div>
                <div class="text-center text-white">
                    <div>Trouvé(s):&nbsp;@tirage.Found</div>
                    @if(tirage.Diff != 0) {
                        <div>&Eacute;cart:&nbsp;@tirage.Diff</div>
                    }
                    <div>@tirage.Solutions.Count()&nbsp;solutions</div>
                    <div>Durée:&nbsp;@($"{Duree:N3}")s</div>
                </div>
                <div>&nbsp;</div>
                <div class="w-100 text-center  @cls">@Solution</div>
            }
    </div>
</TelerikAnimationContainer>;
@code {
    protected Timer timer;
    public TelerikAnimationContainer AnimationContainer { get; set; }

    public string Solution { get; set; }
    [Parameter]
    public double Duree { get; set; }
    [Parameter]
    public int DueTime { get; set; }

    protected override void OnInitialized() {
        timer = new Timer(new TimerCallback(async (state) => {
            await InvokeAsync(AnimationContainer.HideAsync);
        }));


    }

    public async Task ShowAsync(CebDetail detail = null) {
        Solution = (detail == null) ? tirage.Solution() :  detail.ToString();
        await AnimationContainer.ShowAsync();
        timer.Change(DueTime, 0);

    }
    // public async Task HideAsync() {
    //    await AnimationContainer.HideAsync();
    // }

}
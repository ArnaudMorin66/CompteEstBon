@using CompteEstBon
@using System.Collections.ObjectModel
@inject CebTirage tirage

<TelerikGrid Data="Details"
             Height="360px"
             SelectionMode="Telerik.Blazor.GridSelectionMode.Single"
             Class="solutions border border-secondary"
             SelectedItemsChanged="@(async (IEnumerable<CebDetail> liste) => { await Toast.ShowAsync(liste.FirstOrDefault()); })"
             TItem="CebDetail">

    <GridColumns>
        @if (TypeGrille == CebTypeGrille.Grille) {
            <GridColumn  Field="Op1"></GridColumn>
            <GridColumn Field="Op2"></GridColumn>
            <GridColumn Field="Op3"></GridColumn>
            <GridColumn Field="Op4"></GridColumn>
            <GridColumn Field="Op5"></GridColumn>
        } else {
            <GridColumn Field="Op3">
                <Template>
                    @{
                        var row = context as CebDetail;
                        <div>@row.Op1</div>
                        <div>@row.Op2</div>
                        <div>@row.Op3</div>
                        <div>@row.Op4</div>
                        <div>@row.Op5</div>
                    }
                </Template>
            </GridColumn>
        }

    </GridColumns>
</TelerikGrid>


@code {
    private CebTypeGrille _typegrille;
    [Parameter]
    public CebTypeGrille TypeGrille {
        get => _typegrille;
        set {
            if (_typegrille != value) {
                _typegrille = value;
                InvokeAsync(StateHasChanged);
            }
        }
    }


    [Parameter] public CebToast Toast { get; set; }

    public List<CebDetail> Details { get; set; }
    public async Task RefreshAsync() =>
        await InvokeAsync(async () => {
            Details = tirage.Details.ToList();
            await InvokeAsync(StateHasChanged);
        });


    protected override void OnInitialized() {

        Details = new List<CebDetail>();
    }

}

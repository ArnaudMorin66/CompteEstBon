@page "/"
@using System.Collections.ObjectModel
@using System.Diagnostics
@using System.Text
@using CompteEstBon
@inject CebTirage tirage
<div class="sticky-top">
    <div class="btn-toolbar  justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
        <div class="btn-group w-100" role="group" aria-label="First group">
            <button class="btn btn-primary h-100 @((tirage.Status != CebStatus.CompteApproche && tirage.Status != CebStatus.CompteEstBon) ? "enabled" : "")"
                    @onclick="() => TypeGrille = TypeGrille == CebTypeGrille.Grille ? CebTypeGrille.Liste : CebTypeGrille.Grille"
                    aria-disabled="true"
                    title="@(TypeGrille == CebTypeGrille.Liste ? "Mode Liste" : "Mode Grille")"
                    accesskey="m"
                    role="button"
                    type="button">
                <div class="d-flex justify-content-between">
                    <img src="favicon.ico" style="height:1.5rem;">
                    <cite class="text-uppercase text-danger font-weight-bold text-wrap text-truncate ">Telerik - Compte&nbsp;est&nbsp;bon</cite>
                    <i class="text-white fas @(TypeGrille == CebTypeGrille.Liste ? "fa-ellipsis-v" : "fa-ellipsis-h") fa-2x"></i>
                </div>
            </button>
        </div>

    </div>
</div>
<div class="row ">
    <div class="col text-center">
        <div class="card text-center border border-secondary">
            <div class="card-header bg-gradient-dark text-white">
                <i class="fas fa-bars"></i>
                &nbsp;Plaques
            </div>
            <div class="card-body">
                <div class="row">
                    @foreach (var plq in tirage.Plaques)
                    {
                        <TelerikDropDownList Data="@CebPlaque.AnyPlaques"
                                             @bind-Value="plq.Value"
                                             OnChange="@tirage.ClearAsync"
                                             Class="text-center col-2"
                                             TValue="int"
                                             TItem="int">
                        </TelerikDropDownList>


                    }
                </div>

            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center border border-secondary">
            <div class="card-header bg-gradient-dark text-white">
                <i class="fas fa-search"></i>
                &nbsp;Trouver
            </div>
            <div class="card-body">
                <TelerikNumericTextBox @bind-Value="tirage.Search" Step="1" Min="100" Max="999" Format="N0"
                                       T="int" Class="border-secondary"></TelerikNumericTextBox>

            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card border-secondary">
            <div class="bg-gradient-dark">
                <div class="btn-group w-100" role="group" aria-label="hasard">
                    <button id="hasard"
                            class="btn btn-primary  w-25"
                            accesskey="t"
                            title="Tirage aléatoire (ALT-T)"
                            role="button"
                            type="button"
                            Enabled="@(tirage.Status != CebStatus.EnCours)"
                            @onclick="tirage.RandomAsync">
                        <i class="fa fa-random"></i>
                        <div>Tirage</div>
                    </button>
                </div>
            </div>
            <div class="btn-group w-100" role="group" aria-label="Action">
                @switch (tirage.Status)
                {
                    case CebStatus.EnCours:
                        <button class="btn btn-info btn-block">
                            <div><i class="fas fa-spinner fa-spin"></i></div>
                            <div class="animation">
                                Patientez, calcul en cours&hellip;
                            </div>
                        </button>

                        break;
                    case CebStatus.CompteEstBon:
                        <button class="btn btn-success btn-block"
                                @onclick="@tirage.ClearAsync"
                                title="Initialisation des résultats (ALT-I)"
                                role="button"
                                type="button"
                                accesskey="i">
                            <div><i class="text-dark far fa-thumbs-up"></i></div>
                            <div class="animation">Compte&nbsp;est&nbsp;bon</div>
                        </button>
                        break;
                    case CebStatus.CompteApproche:
                        <button class="btn btn-warning btn-block"
                                role="button"
                                type="button"
                                title="Initialisation des résultats (ALT-I)"
                                @onclick="@tirage.ClearAsync"
                                accesskey="i">
                            <div><i class="text-danger far fa-thumbs-down"></i></div>
                            <div class="animation">Compte&nbsp;approch&eacute;</div>
                        </button>
                        break;
                    case CebStatus.Erreur:
                        <button class="btn btn-danger btn-block"
                                role="button"
                                type="button"
                                title="Tirage aléatoire (ALT-T)"
                                @onclick="tirage.RandomAsync"
                                accesskey="T">
                            <div class="animation">
                                <div><i class="far fa-exclamation-triangle"></i></div>
                                <div class="animation">Tirage&nbsp;invalide</div>

                            </div>
                        </button>
                        break;
                    default:
                        <button id="resoudre"
                                title="Résolution du tirage (ALT-R)"
                                class="btn btn-primary btn-block"
                                role="button"
                                @onclick="@ResolveAsync"
                                type="button"
                                accesskey="r">
                            <div><i class="fas fa-bolt"></i></div>
                            <div>R&eacute;soudre</div>
                        </button>
                        break;
                }

            </div>
        </div>

    </div>
</div>
<CebSolutions @ref="@solutions" TypeGrille="@TypeGrille" Toast="toast"></CebSolutions>
<div class="text-white text-center font-weight-bolder text-wrap">
    <div class="anima">
        @switch (tirage.Status)
        {
            case CebStatus.EnCours:
                <div class="badge badge-info w-100">
                    <i class="fas fa-spinner fa-spin"></i>&nbsp;Patientez, calcul en cours&hellip;
                </div>
                break;
            case CebStatus.Erreur:
                <div class="badge badge-danger w-100" style="cursor: pointer;" @onclick="@tirage.RandomAsync">
                    <i class="fas fa-exclamation-triangle fa-spin"></i>&nbsp;Tirage invalide
                </div>
                break;
            case CebStatus.CompteApproche:
                <div class="badge badge-warning w-100" style="cursor: pointer;" @onclick="tirage.ClearAsync">
                    <div class="text-dark d-flex justify-content-center">
                        <div class="m-0"><i class="text-danger far fa-thumbs-down"></i></div>
                        <div class="m-0">Compte&nbsp;approch&eacute;</div>
                        <div class="m-0">,&nbsp;Trouvé:&nbsp;@tirage.Found</div>
                        <div class="m-0">,&nbsp;@tirage.Solutions.Count()&nbsp;solutions</div>
                        <div class="m-0">,&nbsp;durée:&nbsp;@($"{duree:N3}")s</div>
                    </div>
                </div>
                break;
            case CebStatus.CompteEstBon:
                <div class="badge badge-success w-100" style="cursor: pointer;" @onclick="@tirage.ClearAsync">
                    <div class="d-flex justify-content-center text-white">
                        <div class="m-0"><i class="text-dark far fa-thumbs-up"></i></div>
                        <div class="m-0">Compte&nbsp;est&nbsp;bon</div>
                        <div class="m-0">, &nbsp;@tirage.Solutions.Count()&nbsp;solutions</div>
                        <div class="m-0">, &nbsp;durée:&nbsp;@($"{duree:N3}")s</div>

                    </div>
                </div>
                break;
            default:
                <div class="h-100">&nbsp;</div>
                break;
        }
    </div>
</div>
<CebToast @ref="toast" DueTime="5000" Duree="@duree"></CebToast>
@code {
    int search { get; set; }
    CebTypeGrille TypeGrille { get; set; }
    double duree { get; set; } = 0;
    public CebToast toast;
    Stopwatch stopwatch;
    CebSolutions solutions { get; set; }

    protected override void OnInitialized()
    {
        stopwatch = new Stopwatch();
        tirage.PropertyChanged += async (sender, e) => { await solutions.RefreshAsync(); };
        base.OnInitialized();

    }




    async Task ResolveAsync()
    {

        stopwatch.Reset();
        stopwatch.Start();
        await tirage.ResolveAsync();


        await InvokeAsync(StateHasChanged);
        stopwatch.Stop();
        duree = stopwatch.Elapsed.TotalSeconds;

        await toast.ShowAsync();
    }
}


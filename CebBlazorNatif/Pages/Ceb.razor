@page "/"
@using System.Collections.ObjectModel
@using System.Threading
@using System.Diagnostics
@using CompteEstBon
@using System.IO;
@inject IJSRuntime JSRuntime
@inject CebTirage tirage
@if (listeplaques == null)
{
    <div>Chargement</div>
}
else
{
    <div class="sticky-top">
        <div class="btn-toolbar  justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
            <div class="btn-group w-100" role="group" aria-label="First group">
                <button class="btn btn-primary h-100 @((tirage.Status != CebStatus.CompteApproche && tirage.Status != CebStatus.CompteEstBon) ? "enabled" : "")"
                        @onclick="() => TypeGrille = TypeGrille == CebTypeGrille.Grille ? CebTypeGrille.Liste : CebTypeGrille.Grille"
                        aria-disabled="true"
                        title="@(TypeGrille == CebTypeGrille.Liste ? "Mode Liste" : "Mode Grille")"
                        accesskey="m"
                        role="button"
                        type="button">
                    <div class="d-flex justify-content-between">
                        <img src="favicon.ico" style="height:1.5rem;">
                        <cite class="text-uppercase text-danger font-weight-bold text-wrap text-truncate ">Compte&nbsp;est&nbsp;bon</cite>
                        <i class="text-white fas @(TypeGrille == CebTypeGrille.Liste ? "fa-ellipsis-v" : "fa-ellipsis-h") fa-2x"></i>
                    </div>
                </button>
            </div>

        </div>
    </div>
    <div class="row center-block">
        <div class="col">
            <div class="card text-center border border-secondary">
                <div class="card-header bg-gradient-dark text-white">
                    <i class="fas fa-bars"></i>
                    &nbsp;Plaques
                </div>
                <div class="card-body">
                    <div class="row">
                        @foreach (var plq in tirage.Plaques)
                        {
                            <div class="col-md-2">
                                <div class="input-group">
                                    <select role="combobox" @bind="plq.Value" class="custom-select bg-gradient-dark text-white text-center" aria-label="Selectionner une plaque">
                                        @foreach (var p in listeplaques)
                                        {
                                            <option value="@p">@p</option>
                                        }

                                    </select>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card text-center border border-secondary">
                <div class="card-header bg-gradient-dark text-white">
                    <i class="fas fa-search"></i>
                    &nbsp;Trouver
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="input-group mb-3 col ceb-entree">
                            <input @bind="@tirage.Search" max="999" min="100" class="form-control bg-gradient-dark text-white text-center" type="number" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 card bg-transparent" style="border: none">
            <div class="card-text bg-transparent" style="margin:0;">
                <div class="btn-group w-100" role="group" aria-label="hasard">
                    <button id="hasard"
                            class="btn btn-primary  w-25"
                            accesskey="t"
                            title="Tirage aléatoire (ALT-T)"
                            role="button"
                            type="button"
                            Enabled="@(tirage.Status != CebStatus.EnCours)"
                            @onclick="tirage.RandomAsync">
                        <i class="fa fa-random"></i>
                        <div>Tirage</div>
                    </button>
                </div>
                <div class="btn-toolbar w-100">
                    <div class="btn-group w-100" role="group" aria-label="Action">
                        @switch (tirage.Status)
                        {
                            case CebStatus.EnCours:
                                <button class="btn btn-info btn-block w-50">
                                    <div><i class="fas fa-spinner fa-spin"></i></div>
                                    <div class="animation">
                                        Patientez, calcul en cours&hellip;
                                    </div>
                                </button>

                                break;
                            case CebStatus.CompteEstBon:
                                <button class="btn btn-success btn-block w-50"
                                        @onclick="@tirage.ClearAsync"
                                        title="Initialisation des résultats (ALT-I)"
                                        role="button"
                                        type="button"
                                        accesskey="i">
                                    <div><i class="text-dark far fa-thumbs-up"></i></div>
                                    <div class="animation">Compte&nbsp;est&nbsp;bon</div>
                                </button>
                                break;
                            case CebStatus.CompteApproche:
                                <button class="btn btn-warning btn-block w-50"
                                        role="button"
                                        type="button"
                                        title="Initialisation des résultats (ALT-I)"
                                        @onclick="@tirage.ClearAsync"
                                        accesskey="i">
                                    <div><i class="text-danger far fa-thumbs-down"></i></div>
                                    <div class="animation">Compte&nbsp;approch&eacute;</div>
                                </button>
                                break;
                            case CebStatus.Erreur:
                                <button class="btn btn-danger btn-block w-50"
                                        role="button"
                                        type="button"
                                        title="Tirage aléatoire (ALT-T)"
                                        @onclick="tirage.RandomAsync"
                                        accesskey="T">
                                    <div class="animation">
                                        <div><i class="far fa-exclamation-triangle"></i></div>
                                        <div class="animation">Tirage&nbsp;invalide</div>

                                    </div>
                                </button>
                                break;
                            default:
                                <button id="resoudre"
                                        title="Résolution du tirage (ALT-R)"
                                        class="btn btn-primary btn-block w-50"
                                        role="button"
                                        @onclick="@ResolveAsync"
                                        type="button"
                                        accesskey="r">
                                    <div><i class="fas fa-bolt"></i></div>
                                    <div>R&eacute;soudre</div>
                                </button>
                                break;
                        }
                        <button id="export"
                                title="Résolution du tirage (ALT-R)"
                                class="btn btn-primary w-50"
                                role="button"
                                @onclick="@ExportExcelAsync"
                                type="button"
                                accesskey="x">
                            <div><i class="fas fa-file-csv"></i></div>
                            <div>Export</div>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <CebSolutions Details="tirage.Solutions" TypeGrille="TypeGrille" ShowDetail="@((detail) => { toast.Show(detail); } )"></CebSolutions>

    <div class="card text-center bg-gradient-dark border-secondary">
        <div class="card-header">
            <div class="'text-center'">
                @switch (tirage.Status)
                {
                    case CebStatus.EnCours:
                        <div class="alert-info" role="alert">
                            <i class="fas fa-spinner fa-spin"></i>&nbsp;Patientez, calcul en cours&hellip;
                        </div>
                        break;
                    case CebStatus.Erreur:
                        <div class="alert-danger" style="cursor: pointer;" @onclick="@tirage.RandomAsync">
                            <i class="fas fa-exclamation-triangle fa-spin"></i>&nbsp;Tirage invalide
                        </div>
                        break;
                    case CebStatus.CompteApproche:
                        <div class="alert-warning" style="cursor: pointer;" @onclick="tirage.ClearAsync">
                            <i class="text-danger far fa-thumbs-down"></i>&nbsp;
                            <span style="color: Navy">
                                &nbsp;Compte
                                approch&eacute;:&nbsp;@tirage.Found,&nbsp;&eacute;cart:@tirage.Diff,&nbsp;@tirage.Count&nbsp;solutions,&nbsp;durée:&nbsp;@($"{duree:N3}")&nbsp;s
                            </span>
                        </div>
                        break;
                    case CebStatus.CompteEstBon:
                        <div class="alert-success" style="cursor: pointer;" @onclick="@tirage.ClearAsync">
                            <i class="far fa-thumbs-up"></i>
                            &nbsp;Compte est bon,&nbsp;@(tirage.Count)
                            solutions,&nbsp;durée:&nbsp;@($"{duree:N3}")&nbsp;s

                        </div>
                        break;
                    default:
                        <div>&nbsp;</div>
                        break;
                }
            </div>
        </div>
    </div>
    <CebToast @ref="toast" Duree="@duree" DueTime="5000"></CebToast>
}
@code {
    CebTypeGrille TypeGrille { get; set; }
    double duree { get; set; } = 0;
    Stopwatch stopwatch;
    CebToast toast;

    IEnumerable<int> listeplaques { get; set; }


    protected override void OnInitialized()
    {

        stopwatch = new Stopwatch();
        listeplaques = CompteEstBon.CebPlaque.AnyPlaques;
        base.OnInitialized();

    }


    async Task ResolveAsync()
    {

        stopwatch.Reset();
        stopwatch.Start();
        await tirage.ResolveAsync();
        stopwatch.Stop();

        duree = stopwatch.Elapsed.TotalSeconds;
        await InvokeAsync(StateHasChanged);
        toast.Show(tirage.Solutions[0]);
    }

    public async Task ExportExcelAsync()
    {
        if (tirage.Status != CebStatus.CompteApproche && tirage.Status != CebStatus.CompteEstBon) return;
        using var mstream = new MemoryStream();
        using var stream = new StreamWriter(mstream, System.Text.Encoding.UTF8);
        await stream.WriteLineAsync("Plaque 1;Plaque 2;Plaque 3;Plaque 4;Plaque 5;Plaque 6;Cherche");
        foreach (var p in tirage.Plaques)
        {
            await stream.WriteAsync($"{p.Value};");
        }

        await stream.WriteLineAsync($"{tirage.Search}");
        await stream.WriteLineAsync();
        string res = "";
        if (tirage.Status == CebStatus.CompteEstBon)
        {
            res = "Compte est bon";
        }
        else
        {
            res = "Compte approché";
            ;
        }
        res += $": {tirage.Found}, Nombre de solutions: {tirage.Count}, Duree: {duree:N3} ";
        await stream.WriteLineAsync(res);
        await stream.WriteLineAsync();


        await stream.WriteLineAsync("Opération 1; Opération 2;Opération 3; Opération 4;Opération 5");
        foreach (var s in tirage.Solutions)
        {
            await stream.WriteLineAsync(s.Op1 + ";" + s.Op2 + ";" + s.Op3 + ";" + s.Op4 + ";" + s.Op5);

        }

        await stream.FlushAsync();
        stream.Close();
        mstream.Close();
        await JSRuntime.SaveAsAsync(mstream.ToArray(), "text/csv", "exportceb.csv");

    }
    void showtoast()
    {

        // toast.Show(new CebDetail(tirage.Solution), duree);
    }
}


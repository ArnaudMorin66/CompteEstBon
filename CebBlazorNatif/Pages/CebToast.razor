@using CompteEstBon
@using System.Timers
@using System.ComponentModel
@inject CebTirage tirage
@if (timer.Enabled) {
    <div class="a-toast">
        <div class="text-white">
            @switch (tirage.Status) {
                case CebStatus.CompteEstBon:
                    <div class=" bg-gradient-success text-center text-uppercase font-weight-bold">
                        <div class="animation">
                            <i class="text-dark far fa-thumbs-up"></i>&nbsp;Compte est bon
                        </div>
                    </div>
                    <div class="font-weight-bold text-center">
                        <div>&nbsp;</div>
                        <div>Trouvé:&nbsp;@tirage.Found</div>
                        <div>@tirage.Solutions.Count&nbsp;solutions</div>
                        <div>Durée:&nbsp;@($"{Duree:N3}")s</div>
                        <div class="separator"></div>
                        <div class="badge badge-success" style="font-weight: 400;">@Solution</div>
                        <div>&nbsp;</div>
                    </div>
                    break;
                case CebStatus.CompteApproche:
                    <div class="bg-gradient-warning text-center text-uppercase text-dark font-weight-bold">
                        <div class="animation">
                            <i class="text-danger far fa-thumbs-down"></i>&nbsp;Compte&nbsp;approché
                        </div>
                    </div>
                    <div class="text-center font-weight-bold">
                        <div>&nbsp;</div>
                        <div>Trouvé(s):&nbsp;@tirage.Found</div>
                        <div>&Eacute;cart:&nbsp;@tirage.Diff</div>
                        <div>@tirage.Solutions.Count&nbsp;solutions</div>
                        <div>Durée:&nbsp;@($"{Duree:N3}")s</div>
                        <div class="separator"></div>
                        <div class="badge badge-warning" style="font-weight: 400;">@Solution</div>
                        <div>&nbsp;</div>
                    </div>
                    break;
                case CebStatus.Erreur:
                    <div class="bg-gradient-danger text-center text-uppercase text-white">
                        <div class="animation">
                            <i class="fas fa-exclamation-triangle"></i>&nbsp;tirage invalide
                        </div>
                    </div>
                    break;
                case CebStatus.EnCours:
                    <div class=" bg-gradient-info text-center">
                        <div class="animation">
                            <i class="align-middle fas fa-compass fa-spin"></i>Patientez,&nbsp;calcul&nbsp;en&nbsp;cours
                        </div>
                    </div>
                    break;
                default:
                    <div></div>
                    break;
            }
        </div>
    </div>
}
@code {
    protected Timer timer;

    public CebBase Solution { get; set; }

    [Parameter]
    public int DueTime { get; set; }
    
    [Parameter]
    public double Duree { get; set; }

    protected override void OnInitialized() {

        DueTime = 10000;
        timer = new Timer();
        timer.AutoReset = false;
        timer.Interval = DueTime;
        timer.Elapsed += (source, e) => {
            InvokeAsync(StateHasChanged);

        };

    }

    public void Show(CebBase detail) {
        timer?.Stop();
        Solution = detail;

        timer.Start();
        InvokeAsync(StateHasChanged);
        timer.Interval = DueTime;

    }
    public void Hide() {
        timer.Stop();
        InvokeAsync(StateHasChanged);
    }

}
@using CompteEstBon
@using System.Threading;
@using Telerik.Blazor.Components
@inject CebTirage tirage
@{
    string cls = "";
    string title = "";
    string icn = "";
    string rsl = "";
    switch (tirage.Status)
    {
        case CebStatus.CompteEstBon:
            title = "bg-gradient-success text-white";
            cls = "bg-success text-white";
            icn = "fa-thumbs-up text-white";
            rsl = "Compte est bon";
            break;
        case CebStatus.CompteApproche:
            title = "bg-gradient-warning text-dark";
            icn = "fa-thumbs-down text-danger";
            cls = "bg-warning text-dark";
            rsl = "Compte approché";
            break;
        default:
            return;
    }
}
<TelerikWindow Centered="true"
               Height="auto"
               Class="toast-window"
               @bind-Visible="@ToastVisible"
               Width="400px">
    <WindowTitle>
        <div class="text-center text-uppercase font-weight-bold w-100 @title">
            <i class="far @icn"></i>&nbsp;@rsl
        </div>
    </WindowTitle>
    <WindowContent>
        <div class="bg-gradient-primary text-white w-100" style="cursor:pointer; border:thick yellow">
            <div>&nbsp;</div>
            <div class="text-center text-white">
                <div>Trouvé(s):&nbsp;@tirage.Found</div>
                @if (tirage.Diff != 0)
                {
                    <div>&Eacute;cart:&nbsp;@tirage.Diff</div>
                }
                <div>@tirage.Solutions.Count()&nbsp;solutions</div>
                <div>Durée:&nbsp;@($"{Duree:N3}")s</div>
            </div>
            <div>&nbsp;</div>
            <div class="w-100 text-center  @cls">@Solution</div>
        </div>
    </WindowContent>
</TelerikWindow>;
@code {
    protected Timer timer;
    private bool _toastVisible;
    public bool ToastVisible
    {
        get => _toastVisible;
        set {
            if (value == _toastVisible) return;
            if (value) {
                timer = new Timer(new TimerCallback( (state) => {
                    ToastVisible = false;
                    InvokeAsync(StateHasChanged);
                    
                }));
                timer.Change(DueTime, 0);
            }
            else {
                timer.Dispose();

            }
            _toastVisible = value;
        }
    }

    public string Solution { get; set; }
    [Parameter]
    public double Duree { get; set; }
    [Parameter]
    public int DueTime { get; set; }

    protected override void OnInitialized()
    {
        ToastVisible = false;


    }

    public async Task ShowAsync(CebBase detail = null)
    {
        ToastVisible = false;
       
        Solution = (detail == null) ? tirage.Solution() : detail.ToString();
        ToastVisible = true;
        await InvokeAsync(StateHasChanged);

    }
}

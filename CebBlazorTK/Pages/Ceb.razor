@page "/"
@using System.Collections.ObjectModel
@using System.Diagnostics
@using System.Text
@using CompteEstBon
@inject CebTirage tirage
<div class="sticky-top">
    <div class="btn-toolbar  justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
        <div class="btn-group w-100" role="group" aria-label="First group">
            <button class="btn btn-primary h-100" 
                    @onclick="() => TypeGrille = TypeGrille == CebTypeGrille.Grille ? CebTypeGrille.Liste : CebTypeGrille.Grille"
                    aria-disabled="true"
                    title="@(TypeGrille == CebTypeGrille.Liste ? "Mode Liste" : "Mode Grille")"
                                        
                    accesskey="m"
                    role="button"
                    type="button">
                <div class="d-flex justify-content-between">
                    <img src="favicon.ico" style="height:1.5rem;">
                    <cite class="text-uppercase text-danger font-weight-bold text-wrap text-truncate ">Telerik - Compte&nbsp;est&nbsp;bon</cite>
                    <i class="text-white fas @(TypeGrille == CebTypeGrille.Liste ? "fa-ellipsis-v" : "fa-ellipsis-h") fa-2x"></i>
                </div>
            </button>
        </div>

    </div>
</div>
<div class="row center-block">
    <div class="col">
        <div class="card text-center border border-secondary">
            <div class="card-header bg-gradient-dark text-white">
                <i class="fas fa-bars"></i>
                &nbsp;Plaques
            </div>
            <div class="card-body">
                <div class="row">
                    @foreach (var plq in tirage.Plaques)
                    {
                        <div class="col-md-2">
                            <TelerikComboBox Data="@CebPlaque.AnyPlaques"
                                             @bind-Value="plq.Value"
                                             ClearButton="false"
                                             Class="w-100 ceb-entree"
                                             Enabled="tirage.Status != CebStatus.EnCours"
                                             TValue="int"
                                             TItem="int">
                            </TelerikComboBox>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center border border-secondary">
            <div class="card-header bg-gradient-dark text-white">
                <i class="fas fa-search"></i>
                &nbsp;Trouver
            </div>
            <div class="card-body">
                <div class="row">
                    <TelerikNumericTextBox @bind-Value="tirage.Search" Step="1" Min="100" Max="999" Format="N0"
                                           Enabled="tirage.Status != CebStatus.EnCours"
                                           T="int" Class="col ceb-entree"></TelerikNumericTextBox>

                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3 card bg-transparent" style="border: none">
        <div class="card-text bg-transparent" style="margin:0;">
            <div class="btn-group w-100" role="group" aria-label="hasard">
                <button id="hasard"
                        class="btn btn-primary  w-25"
                        accesskey="t"
                        title="Tirage aléatoire (ALT-T)"
                        role="button"
                        type="button"
                        @onclick="tirage.RandomAsync">
                    <i class="fa fa-random"></i>
                    <div>Tirage</div>
                </button>
            </div>

            <div class="btn-group w-100" role="group" aria-label="Action">
                @switch (tirage.Status)
                {
                    case CebStatus.EnCours:
                        <button class="btn btn-info btn-block">
                            <div><i class="fas fa-spinner fa-spin"></i></div>
                            <div class="animation">
                                Patientez, calcul en cours&hellip;
                            </div>
                        </button>

                        break;
                    case CebStatus.CompteEstBon:
                        <button class="btn btn-success btn-block"
                                @onclick="@tirage.ClearAsync"
                                title="Initialisation des résultats (ALT-I)"
                                role="button"
                                type="button"
                                accesskey="i">
                            <div><i class="text-dark far fa-thumbs-up"></i></div>
                            <div class="animation">Compte&nbsp;est&nbsp;bon</div>
                        </button>
                        break;
                    case CebStatus.CompteApproche:
                        <button class="btn btn-warning btn-block"
                                role="button"
                                type="button"
                                title="Initialisation des résultats (ALT-I)"
                                @onclick="@tirage.ClearAsync"
                                accesskey="i">
                            <div><i class="text-danger far fa-thumbs-down"></i></div>
                            <div class="animation">Compte&nbsp;approch&eacute;</div>
                        </button>
                        break;
                    case CebStatus.Erreur:
                        <button class="btn btn-danger btn-block"
                                role="button"
                                type="button"
                                title="Tirage aléatoire (ALT-T)"
                                @onclick="tirage.RandomAsync"
                                accesskey="T">
                            <div class="animation">
                                <div><i class="far fa-exclamation-triangle"></i></div>
                                <div class="animation">Tirage&nbsp;invalide</div>

                            </div>
                        </button>
                        break;
                    default:
                        <button id="resoudre"
                                title="Résolution du tirage (ALT-R)"
                                class="btn btn-primary btn-block "
                                role="button"
                                @onclick="@ResolveAsync"
                                type="button"
                                accesskey="r">
                            <div><i class="fas fa-bolt"></i></div>
                            <div>R&eacute;soudre</div>
                        </button>
                        break;
                }

            </div>
        </div>
    </div>
</div>
<CebSolutions @ref="@solutions"
              TypeGrille="@TypeGrille"
              Details="@tirage.Solutions"
              ShowDetail="ShowSolutionAsync"></CebSolutions>
<div class="card text-center bg-gradient-dark border-secondary">
    <div class="card-header">
        <div class="'text-center'">
            @switch (tirage.Status)
            {
                case CebStatus.EnCours:
                    <div class="alert-info" role="alert">
                        <i class="fas fa-spinner fa-spin"></i>&nbsp;Patientez, calcul en cours&hellip;
                    </div>
                    break;
                case CebStatus.Erreur:
                    <div class="alert-danger" style="cursor: pointer;" @onclick="@tirage.RandomAsync">
                        <i class="fas fa-exclamation-triangle fa-spin"></i>&nbsp;Tirage invalide
                    </div>
                    break;
                case CebStatus.CompteApproche:
                    <div class="alert-warning" style="cursor: pointer;" @onclick="tirage.ClearAsync">
                        <i class="text-danger far fa-thumbs-down"></i>&nbsp;
                        <span style="color: Navy">
                            &nbsp;Compte
                            approch&eacute;:&nbsp;@tirage.Found,&nbsp;&eacute;cart:@tirage.Diff,&nbsp;@tirage.Count&nbsp;solutions,&nbsp;durée:&nbsp;@($"{duree:N3}")&nbsp;s
                        </span>
                    </div>
                    break;
                case CebStatus.CompteEstBon:
                    <div class="alert-success" style="cursor: pointer;" @onclick="@tirage.ClearAsync">
                        <i class="far fa-thumbs-up"></i>
                        &nbsp;Compte est bon,&nbsp;@(tirage.Count)
                        solutions,&nbsp;durée:&nbsp;@($"{duree:N3}")&nbsp;s

                    </div>
                    break;
                default:
                    <div>&nbsp;</div>
                    break;
            }
        </div>
    </div>
</div>
<CebToast @ref="toast" DueTime="8000" Duree="@duree"></CebToast>
@code {
    // public IEnumerable<CebBase> Details { get; set; }
    int search { get; set; }
    CebTypeGrille TypeGrille { get; set; }
    double duree { get; set; } = 0;
    public CebToast toast;
    Stopwatch stopwatch;
    CebSolutions solutions { get; set; }


    protected override void OnInitialized()
    {
        // Details = new List<CebBase>(tirage.Solutions);
        stopwatch = new Stopwatch();
        tirage.PropertyChanged += async (sender, e) =>
        {
            // Details = tirage.Solutions.ToList(); // new List<CebBase>(tirage.Solutions);
            await InvokeAsync(StateHasChanged);
        }; //  solutions.RefreshAsync(); };
        base.OnInitialized();

    }

    private async Task ShowSolutionAsync(CebBase sol)
    {
        await toast.ShowAsync(sol);
    }


    async Task ResolveAsync()
    {

        stopwatch.Reset();
        stopwatch.Start();
        await tirage.ResolveAsync();


        await InvokeAsync(StateHasChanged);
        stopwatch.Stop();
        duree = stopwatch.Elapsed.TotalSeconds;

        await toast.ShowAsync();
    }
}


@using CompteEstBon
@using System.Threading
@using System.ComponentModel
@inject CebTirage tirage


<div class="a-toast @Display">
    <div class="text-white">
        @switch (tirage.Status) {
            case CebStatus.CompteEstBon:
                <div class=" bg-success text-center text-uppercase w-100">
                    <i class="fas fa-thumbs-up fa-2x"></i>&nbsp;Compte est bon
                </div>
                <div class="font-weight-bold text-center  w-100">
                    <div >&nbsp;</div>
                    <div class="e-animate">Trouvé:&nbsp;@tirage.Found</div>
                    <div>Nombre de solutions:&nbsp;@tirage.Solutions.Count,&nbsp;Durée:&nbsp;@($"{Duree:N3}")&nbsp;s</div>
                    <div class="badge badge-info" style="font-weight: 400;">@Solution</div>
                     <div >&nbsp;</div>
                </div>
                break;
            case CebStatus.CompteApproche:
                <div class="bg-warning text-center text-uppercase text-darkw-100">
                    <i class="text-danger fas fa-thumbs-down fa-2x"></i>&nbsp;Compte
                    approché
                </div>
                <div class="text-center font-weight-bold w-100">
                     <div >&nbsp;</div>
                    <div>Trouvé(s):&nbsp;@tirage.Found</div>
                    <div>&Eacute;cart:&nbsp;@tirage.Diff</div>
                    <div>Nombre de solutions:&nbsp;@tirage.Solutions.Count,&nbsp;Durée:&nbsp;@($"{Duree:N3}")&nbsp;s </div>
                    <div class="badge badge-info" style="font-weight: 400;">@Solution</div>
                     <div >&nbsp;</div>
                </div>
                break;
            case CebStatus.Erreur:
                <div class="bg-danger text-center text-uppercase text-white w-100">
                    <i class="fas fa-exclamation-triangle fa-2x"></i>&nbsp;tirage invalide
                </div>
                break;
            case CebStatus.EnCours:
                <div class=" bg-info text-center w-100 p-2">
                    <i class="align-middle fas fa-compass fa-spin fa-2x"></i>En
                    attente
                </div>
                break;
            default:
                <div></div>
                break;
        }
    </div>
</div>
<div>&nbsp;</div>

@code {
    protected Timer timer;
    protected string Display { get; set; }

    public string Solution { get; set;}

    public double Duree { get; set;}
    [Parameter]
    public int DueTime { get; set;  }

    protected override void OnInitialized() {
        Display = "invisible";
        DueTime = 10000;

    }

    public void Show(int no = 0, double duree=0) {
        timer?.Dispose();
        Solution = tirage.SolutionIndex(no);
        Duree = duree ;
        Display = "";
        InvokeAsync(StateHasChanged);


        timer = new Timer(new TimerCallback(_ => {
            Display = "invisible";
            InvokeAsync(StateHasChanged);
            timer.Dispose();
        }), null, DueTime, 0);
    }
    public void Hide() {
        timer?.Dispose();
        Display = "invisible";
        InvokeAsync(StateHasChanged);
    }

}
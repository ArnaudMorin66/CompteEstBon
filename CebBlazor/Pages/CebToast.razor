@using CompteEstBon
@using Syncfusion.Blazor.Popups
@using System.Timers
@using Microsoft.AspNetCore.Routing.Constraints
@inject CebTirage tirage
<SfDialog Width="480"
          ShowCloseIcon="false"
          AllowDragging="true"
          @bind-Visible="@Visible"
          @onclick="() => Visible = false"
          ID="DlgToast">
    <DialogAnimationSettings Effect="@DialogEffect.FadeZoom"
                             Duration="600">
    </DialogAnimationSettings>
    <DialogTemplates>
        <Header>
            <div class="w-100 h-100 text-center fs-5 text-uppercase fw-bold @cls">
                <i class="fa-regular @icn"></i>&nbsp;@rsl
            </div>
        </Header>
        <Content>
            <div class="w-100 text-center text-white">
                <div>Trouv&eacute;&nbsp;@tirage.Found</div>
                @if (tirage.Diff != 0) {
                    <div>&Eacute;cart:&nbsp;@tirage.Diff</div>
                }
                <div>@tirage.Count&nbsp;solutions&nbsp;en&nbsp;@($"{tirage.Duree.TotalSeconds:F3}") s</div>
            </div>
            <div class="w-100 text-center text-white">
                @{
                    <div class="separator bg-warning mb-2">&nbsp;</div>
                    foreach (var item in Solution.Operations) {
                        <div>@item</div>
                    }
                }
            </div>
        </Content>
        <FooterTemplate>
            <div class="w-100 h-100 text-center fs-5 text-uppercase fw-bold @cls">
                <i class="fa-regular @icn"></i>&nbsp;@rsl
            </div>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>
@code {
#pragma warning disable CS8618
    protected Timer timer = new();
    protected bool WithTimer { get; set; }
    private bool _visible;

    public bool Visible {
        get => _visible;
        set {
            if (value == _visible) return;
            _visible = value;
            if (WithTimer) {
                timer.Stop();
                if (_visible) {
                    timer.Start();
                }
            }
            InvokeAsync(StateHasChanged);
        }
    }

    public CebBase Solution { get; set; }
    private int _duetime;

    [Parameter]
#pragma warning disable BL0007
    public int DueTime {
        get => _duetime;
        set {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            if (_duetime == value) return;
            _duetime = value;
            timer.Interval = _duetime;

        }

    }
    string cls;
    string icn;
    string rsl;
    protected override void OnInitialized() {
        timer.Elapsed += (_, _) => Visible = false;
    }

    public async Task ShowAsync(CebBase ligne, bool withTimer = true) {
#pragma warning disable CS8601
        switch (tirage.Status) {
            case CebStatus.CompteEstBon:
                cls = "bg-success text-white";
                icn = "fa-thumbs-up";
                rsl = "Le compte est bon";
                break;
            case CebStatus.CompteApproche:
                icn = "fa-thumbs-down text-wheat";
                cls = "bg-secondary text-wheat";
                rsl = "Compte approchÃ©";
                break;
        }
        if (Visible) {
            await InvokeAsync(() => Visible = false);
        }
        WithTimer = withTimer;
        Solution = ligne;
        Visible = true;
        await InvokeAsync(StateHasChanged);
    }

    public async Task HideAsync() {
        if (!Visible) return;
        Visible = false;
        await InvokeAsync(StateHasChanged);
    }

}
@using CompteEstBon
@using Syncfusion.Blazor.Popups
@inject CebTirage tirage
<SfDialog Width="480" @bind-Visible="@Visible"
          ShowCloseIcon="false"
		  @onclick="() => Visible = !Visible"
		  ID="DlgToast">
	<DialogAnimationSettings
		Effect="@DialogEffect.FadeZoom"
		Duration="600">
	</DialogAnimationSettings>
	<DialogTemplates>
		<Content>
			@{
				string cls;
				string icn;
				string rsl;
				switch (tirage.Status) {
					case CebStatus.CompteEstBon:
						cls = "bg-success text-white border border-secondary";
						icn = "fa-thumbs-up text-black";
						rsl = "Compte est bon";
						break;
					case CebStatus.CompteApproche:
						icn = "fa-thumbs-down text-wheat";
						cls = "bg-secondary text-wheat border border-primary";
						rsl = "Compte approché";
						break;
					default:
						return;
				}

				<div class="w-100 text-center @cls">
					<i class="fa-regular @icn"></i>&nbsp;@rsl
				</div>

				<div>&nbsp;</div>
				<div class="text-center text-white">
					<div>Trouvé(s):&nbsp;@tirage.Found</div>
					@if (tirage.Diff != 0) {
						<div>&Eacute;cart:&nbsp;@tirage.Diff</div>
					}
					<div>@tirage.Count&nbsp;solutions</div>
					<div>Durée:&nbsp;@($"{tirage.Duree:N3}")s</div>
				</div>
				<div>&nbsp;</div>
				<div class="w-100 text-center text-white bg-gradient ">
					@{
						<div class="separator bg-warning mb-2">&nbsp;</div>
						foreach (var item in Solution.Operations) {
							<div>@item</div>
						}
						<div>&nbsp;</div>
					}
				</div>
			}
		</Content>
	</DialogTemplates>
</SfDialog>

@code {
#pragma warning disable CS8618
	protected Timer? timer;
	private bool _visible;

	public bool Visible {
		get => _visible;
		set {
			if (value == _visible) return;
			_visible = value;
			if (_visible) {
				timer?.Dispose();
				timer = new Timer(_ => { Visible = false; });
				timer.Change(DueTime, 0);
			}
			else {
				timer?.Dispose();
				_visible = false;
			}
			InvokeAsync(StateHasChanged);
		}
	}

	public CebBase Solution { get; set; }

	[Parameter]
	public int DueTime { get; set; }

	protected override void OnInitialized() {
		DueTime = 10000;
	}

	public async Task ShowAsync(CebBase ligne) {
		if (Visible) Visible = false;
#pragma warning disable CS8601
		Solution = ligne;
		Visible = true;
		await InvokeAsync(StateHasChanged);
	}

	public async Task HideAsync() {
		Visible = false;
		await InvokeAsync(StateHasChanged);
	}

}
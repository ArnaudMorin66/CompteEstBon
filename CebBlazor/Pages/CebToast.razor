@using CompteEstBon
@using System.Threading;
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.Popups
@using System.ComponentModel
@inject CebTirage tirage
    <EjsDialog Width="480" @bind-Visible="@Visible" CssClass="DlgToast" ShowCloseIcon="false"
               ID="DlgToast">
        <DialogAnimationSettings Effect="@DialogEffect.SlideBottom" Duration=400></DialogAnimationSettings>
        <DialogEvents OnOverlayClick="@(() => { Visible = false; })"></DialogEvents>
        <DialogTemplates>
            <Content>
                @if (tirage.Status == CebStatus.CompteEstBon) {
                    <div class="  bg-gradient-success text-center text-uppercase font-weight-bold text-white">
                        <div class="animation">
                            <i class="text-white far fa-thumbs-up"></i>&nbsp;Compte est bon
                        </div>
                    </div>
                } else if (tirage.Status == CebStatus.CompteApproche){
                    <div class="bg-gradient-warning text-center text-uppercase text-dark font-weight-bold text-white">
                        <div class="animation">
                            <i class="text-danger far fa-thumbs-down"></i>&nbsp;Compte&nbsp;approché
                        </div>
                    </div>
                } else { return; }
                <div>&nbsp;</div>
                <div class="text-center text-white">
                    <div>Trouvé(s):&nbsp;@tirage.Found</div>
                    @if (tirage.Status == CebStatus.CompteApproche) {
                        <div>&Eacute;cart:&nbsp;@tirage.Diff</div>
                    }
                    <div>@tirage.Solutions.Count&nbsp;solutions</div>
                    <div>Durée:&nbsp;@($"{Duree:N3}")s</div>
                </div>
                <div>&nbsp;</div>
                <div class="w-100 text-center  @(tirage.Status == CebStatus.CompteApproche ? "bg-warning text-dark" : "bg-success text-white") ">@Solution</div>
            </Content>
        </DialogTemplates>
    </EjsDialog>

@code {
    protected Timer timer;
    private bool _visible = false;
    public bool Visible {
        get => _visible;
        set {
            if (value != _visible) {
                _visible = value;
                if (_visible) {
                    timer.Change(DueTime, 0);
                }
                InvokeAsync(StateHasChanged);
            }
        }
    }

    public String Solution { get; set; }
    [Parameter]
    public double Duree { get; set; }
    [Parameter]
    public int DueTime { get; set; }

    protected override void OnInitialized() {

        DueTime = 5000;
        timer = new System.Threading.Timer(new TimerCallback((state) => {
            Visible = false;
        }));
    }

    public async Task ShowAsync(int index) {
        Solution =  tirage.SolutionIndex(index);
        Visible = true;
        await InvokeAsync(StateHasChanged);
    }
    public async Task HideAsync() {
        Visible = false;
        await InvokeAsync(StateHasChanged);
    }

}
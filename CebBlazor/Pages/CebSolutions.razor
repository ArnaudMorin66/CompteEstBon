@using CompteEstBon
@using System.Collections.ObjectModel
@using Microsoft.AspNetCore.Components
@inject CebTirage tirage

<SfGrid @ref="solutions"
         DataSource="@tirage.Solutions"
         GridLines="GridLine.None"
         TValue="CebDetail"
         Height="400"
         AllowSelection="true"
         AllowExcelExport="true"
         AllowResizing="true"
         EnableAltRow="true"
         ID="solutions">
    <GridColumns>
        <GridColumn Field=@nameof(CebDetail.Op1) HeaderText="Opération 1" />
        <GridColumn Field=@nameof(CebDetail.Op2) HeaderText="Opération 2" />
        <GridColumn Field=@nameof(CebDetail.Op3)  HeaderText="Opération 3" />
        <GridColumn Field=@nameof(CebDetail.Op4)  HeaderText="Opération 4" />
        <GridColumn Field=@nameof(CebDetail.Op5)  HeaderText="Opération 5" />

    </GridColumns>

</SfGrid>
@code {
    private CebTypeGrille _typegrille;
    [Parameter]
    public CebTypeGrille TypeGrille {
        get => _typegrille;
        set {
            if (_typegrille != value) {
                _typegrille = value;

                StateHasChanged();
                solutions.RefreshColumns();
                solutions.Refresh();
            }
        }
    }

    [Parameter] public CebToast Toast { get; set; }

    // ReSharper disable once UnusedAutoPropertyAccessor.Local
    SfGrid<CebDetail> solutions { get; set; }
    public IEnumerable<CebDetail> Details { get; set; } = new List<CebDetail>();


    public async Task SetDataAsync(CebData data) {
        await InvokeAsync(() => {
            Details = data.Solutions;
            StateHasChanged();
        });
    }
    public async Task ClearAsync() {
        await InvokeAsync(() => {
            Details = new List<CebDetail>();
            StateHasChanged();
        });
    }


    public void ExportExcel() {
        // if (tirage.Status != CebStatus.CompteApproche && tirage.Status != CebStatus.CompteEstBon) return;
        solutions.ExcelExport(new ExcelExportProperties { ExportType = ExportType.AllPages });
        // CompteEstBon.ExportData.ToExcel(tirage);
    }
    public void ExportWord() {
        // if (tirage.Status != CebStatus.CompteApproche && tirage.Status != CebStatus.CompteEstBon) return;
        // solutions.ExcelExport(new ExcelExportProperties { ExportType = ExportType.AllPages });
        //CompteEstBon.ExportData.ToWord(tirage);
    }

    protected async override Task OnInitializedAsync() {

         await base.OnInitializedAsync();
    }
}

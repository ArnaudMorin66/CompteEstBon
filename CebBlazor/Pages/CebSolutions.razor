@using CompteEstBon
@using System.Collections.ObjectModel
@using Microsoft.AspNetCore.Components

@inject CebTirage tirage
<EjsGrid @ref="solutions"
         DataSource="@Details"
         GridLines="GridLine.None"
         TValue="CebDetail"
         Height="400"
         AllowSelection="true"
         AllowExcelExport="true"
         AllowResizing="true"
         EnableAltRow="true"
         ID="solutions">
    <GridSelectionSettings Mode="Syncfusion.EJ2.Blazor.Grids.SelectionMode.Both" Type="SelectionType.Single"></GridSelectionSettings>
    <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>
    <GridEvents RowSelecting="@(async (args) => await Toast.ShowAsync((int)args.RowIndex) )" TValue="CebDetail"></GridEvents> 
        <GridColumns>
            <GridColumn Visible="TypeGrille == CebTypeGrille.Grille" Field="Op1" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Visible="TypeGrille == CebTypeGrille.Grille" Field="Op2" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Visible="TypeGrille == CebTypeGrille.Grille" Field="Op3" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Visible="TypeGrille == CebTypeGrille.Grille" Field="Op4" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Visible="TypeGrille == CebTypeGrille.Grille" Field="Op5" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Visible="TypeGrille == CebTypeGrille.Liste" TextAlign="TextAlign.Center">
                <Template>
                    @{
                        var row = context as CebDetail;
                        <div>@row.Op1</div>
                        <div>@row.Op2</div>
                        <div>@row.Op3</div>
                        <div>@row.Op4</div>
                        <div>@row.Op5</div>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
</EjsGrid>
@code {
    private CebTypeGrille _typegrille;
    [Parameter]
    public CebTypeGrille TypeGrille {
        get => _typegrille;
        set {
            if (_typegrille != value) {
                _typegrille = value;

                StateHasChanged();
                solutions.RefreshColumns();
                solutions.Refresh();
            }
        }
    }

    [Parameter] public CebToast Toast { get; set; }

    // ReSharper disable once UnusedAutoPropertyAccessor.Local
    EjsGrid<CebDetail> solutions { get; set; }
    public List<CebDetail> Details { get; set; }


    public void Refresh() {
        Details.Clear();
        Details.AddRange(tirage.Details);
        solutions.Refresh();
        InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized() {
        Details = new List<CebDetail>();
    }

    public void ExportExcel() {
        if (tirage.Status != CebStatus.CompteApproche && tirage.Status != CebStatus.CompteEstBon) return;
        solutions.ExcelExport(new ExcelExportProperties { ExportType = ExportType.AllPages });
        // CompteEstBon.ExportData.ToExcel(tirage);
    }
    public void ExportWord() {
        if (tirage.Status != CebStatus.CompteApproche && tirage.Status != CebStatus.CompteEstBon) return;
        // solutions.ExcelExport(new ExcelExportProperties { ExportType = ExportType.AllPages });
        CompteEstBon.ExportData.ToWord(tirage);
    }
}

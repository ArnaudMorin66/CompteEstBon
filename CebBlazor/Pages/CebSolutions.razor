@using CompteEstBon
@using System.Text
@using Syncfusion.EJ2.Blazor.Grids
@using System.Collections.ObjectModel

@inject CebTirage tirage


<EjsGrid @ref="solutions"
         DataSource="@Details"
         GridLines="GridLine.None"
         TValue="CebDetail"
         Height="400"
         AllowSelection="true"
         AllowExcelExport="true"
         EnableAltRow="true"
         id="solutions">
    <GridSelectionSettings Type="SelectionType.Single"></GridSelectionSettings>
    <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>
    <GridEvents RowSelected="@(async (args) => { await Toast.ShowAsync((int)args.RowIndex); })" TValue="CebDetail"></GridEvents>
    <GridColumns>
        @if (TypeGrille == CebTypeGrille.Liste) {
            <GridColumn Field="Op3" ></GridColumn>
        } else {
            for (var i = 1; i < 6; i++) {
                <GridColumn Field="@($"Op{i}" )"></GridColumn>
            }
        }
    </GridColumns>
</EjsGrid>


@code {
    private CebTypeGrille _typegrille;
    [Parameter]
    public CebTypeGrille TypeGrille {
        get => _typegrille;
        set {
            _typegrille = value;
#pragma warning disable CS4014
            RefreshAsync();
#pragma warning restore CS4014
        }
    }



    [Parameter] public CebToast Toast { get; set; }

    EjsGrid<CebDetail> solutions { get; set; }
    public ObservableCollection<CebDetail> Details { get; set; }


    public async Task RefreshAsync() {
        await InvokeAsync(() => {
            Details = (tirage.Status == CebStatus.CompteApproche || tirage.Status == CebStatus.CompteEstBon) ? new ObservableCollection<CebDetail>(
                tirage.Solutions.Select((solution) => (TypeGrille == CebTypeGrille.Grille) ? new CebDetail(solution)
                                                    : new CebDetail { Op3 = string.Join("<br>", solution.Operations) })) : new ObservableCollection<CebDetail>();
        });
    }


    protected override void OnInitialized() {

        // Details = new ObservableCollection<CebDetail>();
    }

    public void ExportExcel() {
        if (tirage.Status != CebStatus.CompteApproche && tirage.Status != CebStatus.CompteEstBon) return;
        solutions.ExcelExport(new ExcelExportProperties { ExportType = ExportType.AllPages });

    }

}

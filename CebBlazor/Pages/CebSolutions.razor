@using Syncfusion.Blazor.Grids
@using SelectionMode = Syncfusion.Blazor.Grids.SelectionMode

<SfGrid AllowExcelExport="true" AllowResizing="true" AllowSelection="true" DataSource="@Details" EnableAltRow="true" GridLines="GridLine.None" Height="400" ID="solutions" @ref="gdetails" TValue="CebBase">
	<GridEvents OnRecordClick="ShowAsync"
				TValue="CebBase">
	</GridEvents>
	<GridSelectionSettings Mode="SelectionMode.Row" Type="SelectionType.Single"></GridSelectionSettings>
	@if (TypeGrille == CebTypeGrille.Grille)
	{
		<GridColumns>
		  
			@for (var i = 0; i < 5; i++)
			{
				var j = i;
				<GridColumn>
					<Template>
						@{
							#pragma warning disable CS8602
							var op = (context as CebBase).Operations;
							if (j < op.Count) {
								@op[j]
							}
						}

					</Template>
				</GridColumn>
			}
		</GridColumns>
	}
	else
	{
		<GridColumns>
			<GridColumn TextAlign="TextAlign.Center">
				<Template Context="data">
					@foreach (var op in ((CebBase)data).Operations)
					{
						<div>@op</div>
					}
				</Template>
			</GridColumn>

		</GridColumns>
	}

</SfGrid>

@code {
	
	#pragma warning disable CS8618
	SfGrid<CebBase>? gdetails { get; set; }

	[Parameter]
	public CebTypeGrille TypeGrille { get; set; }


	[Parameter]
	public IEnumerable<CebBase> Details { get; set; }

	[Parameter]
	public EventCallback<CebBase> ShowDetail { get; set; }


	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
	}

	private async Task ShowAsync(RecordClickEventArgs<CebBase> ligne)
	{
		await ShowDetail.InvokeAsync(ligne.RowData);
	}

	//public string GetColonne(object o, int i)
	//{
	//	#pragma warning disable CS8603
	//	return i >= (o as CebBase)?.Operations.Count ? "" : (o as CebBase)?.Operations[i];
	//}

}
@using CompteEstBon
@using System.Text
@using Syncfusion.EJ2.Blazor.Grids
@using System.Collections.ObjectModel

@inject CebTirage tirage


<EjsGrid @ref="solutions"
         DataSource="@Details"
         GridLines="GridLine.None"
         TValue="CebDetail"
         Height="400"
         AllowSelection="true"
         AllowExcelExport="true"
         EnableAltRow="true"
         id="solutions">
    <GridSelectionSettings Type="SelectionType.Single"></GridSelectionSettings>
    <GridTextWrapSettings WrapMode="WrapMode.Content"></GridTextWrapSettings>
    <GridEvents RowSelected="@(async (args) => { await Toast.ShowAsync((int)args.RowIndex); })" TValue="CebDetail"></GridEvents>
    <GridColumns>
        @if (TypeGrille == CebTypeGrille.Liste) {
            <GridColumn Field="Op3" ></GridColumn>
        } else {
            for (var i = 1; i < 6; i++) {
                <GridColumn Field="@($"Op{i}" )"></GridColumn>
            }
        }
    </GridColumns>
</EjsGrid>


@code {
    private CebTypeGrille _typegrille;
    [Parameter]
    public CebTypeGrille TypeGrille {
        get => _typegrille;
        set {
            _typegrille = value;
#pragma warning disable CS4014
            Refresh();
#pragma warning restore CS4014
        }
    }



    [Parameter] public CebToast Toast { get; set; }

    EjsGrid<CebDetail> solutions { get; set; }
    public ObservableCollection<CebDetail> Details { get; set; }


    public async Task Refresh() {
        await InvokeAsync(() => {
            Details = new ObservableCollection<CebDetail>(
                tirage.Details.Select(detail => {
                    CebDetail res;
                    if (_typegrille == CebTypeGrille.Grille) {
                        res = detail;
                    } else {
                        res = new CebDetail();
                        res.Op3 = string.Join("<br>", detail.GetType().GetProperties()
                                    .Where(item => item.Name.StartsWith("Op"))
                                    .Select(o => o.GetValue(detail) as string)
                                    .Where(v => !string.IsNullOrEmpty(v)));
                    }
                    return res;
                }));
        });

    }
    protected override void OnInitialized() {

        Details = new ObservableCollection<CebDetail>();
    }

    public void ExportExcel() {
        if (tirage.Status != CebStatus.CompteApproche && tirage.Status != CebStatus.CompteEstBon) return;
        solutions.ExcelExport(new ExcelExportProperties { ExportType = ExportType.AllPages });

    }

}

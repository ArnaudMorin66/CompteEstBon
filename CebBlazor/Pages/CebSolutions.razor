@using CompteEstBon
@using System.Collections.ObjectModel
@using Microsoft.AspNetCore.Components
@inject CebTirage tirage

<SfGrid @ref="gsolutions"
        
        @bind-DataSource="@Details"
        GridLines="GridLine.None"
        Height="400"
        AllowSelection="true"
        AllowExcelExport="true"
        AllowResizing="true"
        EnableAltRow="true"
        ID="solutions">
    <GridColumns>
        <GridColumn Field="Op1" HeaderText="Opération 1" />
        <GridColumn Field="Op2" HeaderText="Opération 2" />
        <GridColumn Field="Op3" HeaderText="Opération 3" />
        <GridColumn Field="Op4" HeaderText="Opération 4" />
        <GridColumn Field="Op5" HeaderText="Opération 5" />

    </GridColumns>

</SfGrid>
@code {
    private CebTypeGrille _typegrille;
    [Parameter]
    public CebTypeGrille TypeGrille
    {
        get => _typegrille;
        set
        {
            if (_typegrille != value)
            {
                _typegrille = value;

                StateHasChanged();
                // gsolutions.Refresh(); //.RefreshColumns();
            }
        }
    }
    [Parameter] public IEnumerable<CebDetail> Details { get; set; }

    [Parameter] public CebToast Toast { get; set; }

    // ReSharper disable once UnusedAutoPropertyAccessor.Local
    SfGrid<CebDetail> gsolutions { get; set; }





    public void ExportExcel()
    {
        // if (tirage.Status != CebStatus.CompteApproche && tirage.Status != CebStatus.CompteEstBon) return;
        gsolutions.ExcelExport(new ExcelExportProperties { ExportType = ExportType.AllPages });
        // CompteEstBon.ExportData.ToExcel(tirage);
    }
    public void ExportWord()
    {
        // if (tirage.Status != CebStatus.CompteApproche && tirage.Status != CebStatus.CompteEstBon) return;
        // solutions.ExcelExport(new ExcelExportProperties { ExportType = ExportType.AllPages });
        //CompteEstBon.ExportData.ToWord(tirage);
    }

    protected async override Task OnInitializedAsync()
    {
        Details = new List<CebDetail>();
        await base.OnInitializedAsync();
    }


}

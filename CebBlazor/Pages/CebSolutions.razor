@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Spinner
@using CompteEstBon
@inject CebTirage tirage

@using SelectionMode = Syncfusion.Blazor.Grids.SelectionMode
@using SelectionType = Syncfusion.Blazor.Grids.SelectionType

<SfGrid AllowExcelExport="true" 
	AllowResizing="true"
	AllowSelection="true" 
	DataSource="tirage.Solutions" 
	EnableAltRow="true"
	GridLines="GridLine.Vertical"
	Height="400" 
	class="g-solutions"
	ID="solutions" 
	TValue="CebBase">

	<GridEvents OnRecordClick="ShowAsync"
				TValue="CebBase">
	</GridEvents>
	<GridSelectionSettings 
		Mode="SelectionMode.Row" 
		Type="SelectionType.Single"></GridSelectionSettings>
	<GridTemplates>
		<EmptyRecordTemplate>
			<SfSpinner Size="80" Type="SpinnerType.Fluent" Visible="@(tirage.Status == CebStatus.EnCours)"></SfSpinner>
		</EmptyRecordTemplate>
	</GridTemplates>
	@if (TypeGrille == CebTypeGrille.Grille)
	{
		<GridColumns>{}

			@for (var i = 0; i < 5; i++)
			{
				var j = i;
				<GridColumn TextAlign="TextAlign.Center" >
					<Template Context="data" >
						@{
							var op = ((CebBase) data).Operations;
							if (j < op.Count)
							{
											@op[j]
							}
						}

					</Template>
				</GridColumn>
			}
		</GridColumns>
	}
	else
	{
		<GridColumns>
			<GridColumn TextAlign="TextAlign.Center">
				<Template Context="data">
					@foreach (var op in ((CebBase)data).Operations)
					{
						<div>@op</div>
					}
				</Template>
			</GridColumn>

		</GridColumns>
	}
</SfGrid>
@code {

#pragma warning disable CS8618
	[Parameter]
	public CebTypeGrille TypeGrille { get; set; }

	[Parameter]
	public EventCallback<int> ShowDetail { get; set; }


	protected override async Task OnInitializedAsync() => await base.OnInitializedAsync();
	

	private async Task ShowAsync(RecordClickEventArgs<CebBase> ligne) => 
		await ShowDetail.InvokeAsync((int) ligne.RowIndex);

}
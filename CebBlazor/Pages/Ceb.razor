@page "/"
@using System.Collections.ObjectModel
@using Syncfusion.EJ2.Blazor.Data
@using System.Threading
@using CompteEstBon
@inject CebTirage tirage

<div class="row">
    <div class="col-2">
        <div class="d-flex justify-content-between border align-items-center border-secondary bg-gradient-dark p-2 h-100" style="color:red">
          <img src="favicon.ico" style="display: inline-block; height:1rem">
            <cite class="font-weight-bold text-wrap text-truncate ">Compte&nbsp;est&nbsp;bon</cite>
        </div>
    </div>
    <div class="col">
        <div class="btn-toolbar  justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
            <div class="btn-group w-100" role="group" aria-label="First group">
                <button id="hasard"
                        class="btn btn-primary  w-25"
                        accesskey="t"
                        title="Tirage aléatoire (ALT-T)"
                        role="button"
                        type="button"
                        Enabled="@(tirage.Status != CebStatus.EnCours)"
                        @onclick="tirage.RandomAsync">
                    Tirage&nbsp;<i class="fas fa-random"></i>
                </button>
                @switch (tirage.Status) {
                    case CebStatus.EnCours:
                        <button class="btn btn-info btn-block">
                            Patience...&nbsp;<i class="fas fa-sync fa-spin"></i>
                        </button>
                        break;
                    case CebStatus.CompteEstBon:
                        <button class="btn btn-success btn-block"
                                @onclick="tirage.ClearAsync"
                                title="Initialisation des résultats (ALT-I)"
                                role="button"
                                type="button"
                                accesskey="i">
                            Initialisation&nbsp;<i class="fas fa-thumbs-up fa-xs"></i>
                        </button>
                        break;
                    case CebStatus.CompteApproche:
                        <button class="btn btn-warning btn-block"
                                role="button"
                                type="button"
                                title="Initialisation des résultats (ALT-I)"
                                @onclick="tirage.ClearAsync"
                                accesskey="i">
                            Initialisation&nbsp;<i class="text-danger fas fa-thumbs-down faxs"></i>
                        </button>
                        break;
                    case CebStatus.Erreur:
                        <button class="btn btn-danger btn-block"
                                role="button"
                                type="button"
                                title="Tirage aléatoire (ALT-T)"
                                @onclick="tirage.RandomAsync"
                                accesskey="T">
                            Tirage&nbsp;<i class="fas fa-exclamation-triangle fa-xs"></i>
                        </button>
                        break;
                    default:
                        <button id="resoudre"
                                title="Résolution du tirage (ALT-R)"
                                class="btn btn-primary btn-block"
                                role="button"
                                @onclick="ResolveAsync"
                                type="button"
                                accesskey="r">
                            R&eacute;soudre&nbsp;<i class="fas fa-bolt fa-xs"></i>
                        </button>

                        break;
                }
                <button id="excel"
                        @onclick="@(()=> this.solutions.ExcelExport(new ExcelExportProperties { ExportType = ExportType.AllPages }))"
                        title="Exportation vers Excel (ALT-X)"
                        accesskey="x"
                        class="btn btn-primary w-25"
                        type="button"
                        Enabled="@(tirage.Status == CebStatus.CompteEstBon || tirage.Status == CebStatus.CompteApproche)"
                        role="button">
                    eXcel&nbsp;<i class="fas fa-file-excel"></i>
                </button>
            </div>
        </div>
    </div>
</div>
<div style="height: 0.5rem;">&nbsp;</div>
<div class="row ">
    <div class="col text-center">
        <div class="card text-center border border-secondary">
            <div class="card-header bg-gradient-dark text-white">
                <i class="fas fa-bars"></i>
                &nbsp;Plaques
            </div>
            <div class="card-body">
                <div class="row">
                    @foreach (var plq in tirage.Plaques) {
                        <div class="col-md-2">
                            <EjsComboBox @bind-Value="@plq.Value"
                                         DataSource="@listeplaques"
                                         CssClass="e-ceb"
                                         TValue="int"
                                         ShowClearButton="false"
                                         Enabled="tirage.Status != CebStatus.EnCours">
                            </EjsComboBox>
                        </div>
                    }
                </div>

            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center border border-secondary">
            <div class="card-header bg-gradient-dark text-white">
                <i class="fas fa-search"></i>
                &nbsp;Trouver
            </div>
            <div class="card-body">
                <EjsNumericTextBox @bind-Value="@tirage.Search"
                                   Max="999"
                                   Min="100"
                                   CssClass="e-ceb"
                                   Format="N0"
                                   Step="1"
                                   TValue="int"
                                   Enabled="tirage.Status != CebStatus.EnCours">
                </EjsNumericTextBox>
            </div>
        </div>
    </div>
</div>
<div class="separator">&nbsp;</div>
<EjsGrid @ref="solutions" @ref:suppressField
         DataSource="@tirage.Details"
         TValue="CebDetail"
         Height="320"
         EnablePersistence="true"
         AllowSelection="true"
         AllowExcelExport="true"
         GridLines="GridLine.None"
         EnableAltRow="true"
         id="solutions">
    <GridSelectionSettings Type="SelectionType.Single"></GridSelectionSettings>
    <GridEvents RowSelected="@((args) => { toast.Show((int)args.RowIndex, duree); })" TValue="CebDetail"></GridEvents>
    <GridColumns>
        <GridColumn Field="Op1" HeaderText="Opération 1"></GridColumn>
        <GridColumn Field="Op2" HeaderText="Opération 2"></GridColumn>
        <GridColumn Field="Op3" HeaderText="Opération 3"></GridColumn>
        <GridColumn Field="Op4" HeaderText="Opération 4"></GridColumn>
        <GridColumn Field="Op5" HeaderText="Opération 5"></GridColumn>
    </GridColumns>
</EjsGrid>
<div class="text-white text-center" style="height: 1.8rem; font-weight: bold; align-self: center; flex-wrap: wrap">
    @switch (tirage.Status) {
        case CebStatus.EnCours:
            <div class="bg-info h-100 border border-dark animation">
                <i class="fas fa-spinner fa-spin"></i>&nbsp;Patientez, calcul en cours...
            </div>
            break;
        case CebStatus.Erreur:
            <div class="bg-danger h-100 border border-dark animation" style="cursor: pointer;" @onclick="tirage.RandomAsync">
                <i class="fas fa-exclamation-triangle fa-spin"></i>&nbsp;Tirage invalide
            </div>
            break;
        case CebStatus.CompteApproche:
            <div class="bg-warning h-100 border border-dark animation" style="cursor: pointer;" @onclick="tirage.ClearAsync">
                <i class="text-danger fas fa-thumbs-down"></i>&nbsp;
                <span style="color: black;">
                    &nbsp;Compte
                    approch&eacute;:&nbsp;@tirage.Found,&nbsp;&eacute;cart:@tirage.Diff,&nbsp;Nb de solutions:&nbsp;@tirage.Solutions.Count
                    &nbsp;solutions,&nbsp;durée:&nbsp;@($"{duree:N3}")&nbsp;s
                </span>
            </div>
            break;
        case CebStatus.CompteEstBon:
            <div class="bg-success h-100 border border-dark animation" style="cursor: pointer;" @onclick="tirage.ClearAsync">
                <i class="fas fa-thumbs-up"></i>
                &nbsp;Compte est bon,&nbsp;Nb de solutions:&nbsp;@tirage.Solutions.Count&nbsp;
                solutions,&nbsp;durée:&nbsp;@($"{duree:N3}")&nbsp;s
            </div>
            break;
        default:
            <div class="h-100">&nbsp;</div>
            break;
    }
</div>
<CebToast @ref="toast" @ref:suppressField DueTime="5000"></CebToast>

<CebFooter></CebFooter>
@code {
    double duree { get; set; } = 0;
    CebToast toast;
    EjsGrid<CebDetail> solutions { get; set; }

    IEnumerable<int> listeplaques { get; set; } = CompteEstBon.CebPlaque.ListePlaques.Distinct();

    protected override void OnInitialized() {
        tirage.PropertyChanged += (_, _e) => {
            toast.Hide();
            solutions.Refresh();
            InvokeAsync(StateHasChanged);
        };
        base.OnInitialized();

    }


    async Task ResolveAsync() {
        var heure = DateTime.Now;
        await tirage.ResolveAsync();

        duree = (DateTime.Now - heure).TotalSeconds;
        toast.Show(0, duree);
    }

}


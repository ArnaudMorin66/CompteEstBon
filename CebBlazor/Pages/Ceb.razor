@page "/"
@using MongoDB.Bson
@using MongoDB.Bson.Serialization.Conventions
@using MongoDB.Driver
@using MongoDB.Driver.Linq
@inject IConfiguration Configuration
@* ReSharper disable  UnknownCssClass *@
@* ReSharper disable CoercedEqualsUsing *@

@inject IJSRuntime js
@inject CebSetting setting
@inject CebTirage tirage
<div class="sticky-top">
    <div class="btn-toolbar  justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
        <div class="btn-group w-100" role="group" aria-label="First group">

            <button class="btn btn-primary h-100 @(tirage.Status == CebStatus.EnCours ? "disabled" : "") @(tirage.Status != CebStatus.CompteApproche && tirage.Status != CebStatus.CompteEstBon ? "enabled" : "")"
                    @onclick="() => TypeGrille = TypeGrille == CebTypeGrille.Grille ? CebTypeGrille.Liste : CebTypeGrille.Grille"
                    aria-disabled="true"
                    title="@(TypeGrille == CebTypeGrille.Liste ? "Mode Liste" : "Mode Grille")"
                    accesskey="m"
                    role="button"
                    type="button">
                <div class="d-flex justify-content-between">
                    <img src="favicon.ico" style="height: 1.5rem;">

                    <cite class="text-uppercase text-danger font-weight-bold text-wrap text-truncate ">Syncfusion - Compte&nbsp;est&nbsp;bon</cite>
                    <i class="text-white fas @(TypeGrille == CebTypeGrille.Liste ? "fa-ellipsis-v" : "fa-ellipsis-h") fa-2x"></i>
                </div>
            </button>
        </div>

    </div>
</div>
<div class="row ">
    <div class="col text-center">
        <div class="card text-center border-secondary">
            <div class="card-header bg-primary bg-gradient text-white">


                <i class="fas fa-bars"></i>
                &nbsp;Plaques
            </div>
            <div class="card-body">
                <div class="row">
                    @foreach (var plq in tirage.Plaques) {
                        <div class="col-md-2">
                            <SfComboBox TItem="string"
                                        TValue="int"
                                        @bind-Value="plq.Value"
                                        DataSource="@ListePlaques"
                                        ShowClearButton="false"
                                        Enabled="tirage.Status != CebStatus.EnCours">
                            </SfComboBox>
                        </div>
                    }
                </div>

            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card text-center border border-secondary">
            <div class="card-header bg-primary bg-gradient text-white">
                <i class="fas fa-search"></i>
                &nbsp;Trouver
            </div>
            <div class="card-body">
                <SfNumericTextBox @bind-Value="tirage.Search"
                                  Max="999"
                                  Min="100"
                                  CssClass="e-ceb"
                                  Format="N0"
                                  Step="1"
                                  TValue="int"
                                  Enabled="tirage.Status != CebStatus.EnCours">
                </SfNumericTextBox>
            </div>
        </div>
    </div>
    <div class="col-md-3 card bg-transparent" style="border: none">
        <div class="card-text bg-transparent" style="margin: 0;">
            <div class="btn-group w-100" role="group" aria-label="resolve">
                @switch (tirage.Status) {
                    case CebStatus.EnCours:
                        <button class="btn btn-info btn-block w-50">
                            <div>
                                <i class="fas fa-spinner fa-spin"></i>
                            </div>
                            <div class="animation">
                                Patientez, calcul en cours&hellip;
                            </div>
                        </button>

                        break;
                    case CebStatus.CompteEstBon:
                        <button class="btn btn-success btn-block w-50"
                                @onclick="@tirage.ClearAsync"
                                title="Initialisation des résultats (ALT-I)"
                                role="button"
                                type="button"
                                accesskey="i">
                            <div>
                                <i class="text-dark far fa-thumbs-up"></i>
                            </div>
                            <div class="animation">Compte&nbsp;est&nbsp;bon</div>
                        </button>
                        break;
                    case CebStatus.CompteApproche:
                        <button class="btn btn-warning btn-block w-50"
                                role="button"
                                type="button"
                                title="Initialisation des résultats (ALT-I)"
                                @onclick="tirage.ClearAsync"
                                accesskey="i">
                            <div>
                                <i class="text-danger far fa-thumbs-down"></i>
                            </div>
                            <div class="animation">Compte&nbsp;approch&eacute;</div>
                        </button>
                        break;
                    case CebStatus.Invalide:
                        <button class="btn btn-danger btn-block w-50"
                                role="button"
                                type="button"
                                title="Tirage aléatoire (ALT-T)"
                                @onclick="tirage.RandomAsync"
                                accesskey="T">
                            <div class="animation">
                                <div>
                                    <i class="far fa-exclamation-triangle"></i>
                                </div>
                                <div class="animation">Tirage&nbsp;invalide</div>

                            </div>
                        </button>
                        break;
                    default:
                        <button id="resoudre"
                                title="Résolution du tirage (ALT-R)"
                                class="btn btn-primary btn-block w-50"
                                role="button"
                                @onclick="ResolveAsync"
                                type="button"
                                accesskey="r">
                            <div>
                                <i class="fas fa-bolt"></i>
                            </div>
                            <div>R&eacute;soudre</div>
                        </button>
                        break;
                }

            </div>
            <div class="btn-toolbar w-100">
                <div class="btn-group w-100" role="group" aria-label="Action">
                    <button id="hasard"
                            class="btn btn-primary  w-50 @(tirage.Status == CebStatus.EnCours ? "disabled" : "")"
                            accesskey="t"
                            title="Tirage aléatoire (ALT-T)"
                            role="button"
                            type="button"
                            @onclick="tirage.RandomAsync">
                        <i class="fa fa-random"></i>
                        <div>Tirage</div>
                    </button>

                    <button id="Excel"
                            
                            title="Export vers excel (ALT-X)"
                            class="btn btn-primary w-25 @(tirage.Status is CebStatus.CompteApproche or CebStatus.CompteEstBon  ? "" :"d-none")"
                            role="button"
                            @onclick="@ExportExcelAsync"
                            type="button"
                            accesskey="x">
                        <div>
                            <i class="fas fa-file-excel"></i>
                        </div>
                        <div>Excel</div>
                    </button>
                    <button id="Word"
                            title="Export vers Word (ALT-X)"
                            class="btn btn-primary w-25 @(tirage.Status is CebStatus.CompteApproche or CebStatus.CompteEstBon  ? "" :"d-none")"
                            role="button"
                            @onclick="@ExportWordAsync"
                            type="button"
                            accesskey="w">
                        <div>
                            <i class="fas fa-file-word"></i>
                        </div>
                        <div>Word</div>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
<CebSolutions @ref="Solutions" TypeGrille="TypeGrille"
              ShowDetail="ShowSolutionAsync"
              Details="tirage.Solutions">
</CebSolutions>

<div class="card text-center bg-primary bg-gradient border-secondary">
    <div class="card-header">
        <div class="'text-center'">
            @switch (tirage.Status) {
                case CebStatus.EnCours:
                    <div class="alert-info" role="alert">
                        <i class="fas fa-spinner fa-spin"></i>&nbsp;Patientez, calcul en cours&hellip;
                    </div>
                    break;
                case CebStatus.Invalide:
                    <div class="alert-danger" style="cursor: pointer;" @onclick="@tirage.RandomAsync">
                        <i class="fas fa-exclamation-triangle fa-spin"></i>&nbsp;Tirage invalide
                    </div>
                    break;
                case CebStatus.CompteApproche:
                    <div class="alert-warning" style="cursor: pointer;" @onclick="tirage.ClearAsync">
                        <i class="text-danger far fa-thumbs-down"></i>&nbsp;
                        <span style="color: Navy">
                            &nbsp;Compte
                            approch&eacute;:&nbsp;@tirage.Found,&nbsp;&eacute;cart:@tirage.Diff,&nbsp;@tirage.Count&nbsp;solutions,&nbsp;durée:&nbsp;@($"{tirage.Duree:N3}")&nbsp;s
                        </span>
                    </div>
                    break;
                case CebStatus.CompteEstBon:
                    <div class="alert-success" style="cursor: pointer;" @onclick="@tirage.ClearAsync">
                        <i class="far fa-thumbs-up"></i>
                        &nbsp;Compte est bon,&nbsp;@(tirage.Count)
                        solutions,&nbsp;durée:&nbsp;@($"{tirage.Duree:N3}")&nbsp;s

                    </div>
                    break;
                default:
                    <div>&nbsp;</div>
                    break;
            }
        </div>
    </div>
</div>
<CebToast @ref="toast" DueTime="10000"></CebToast>
<CebFooter></CebFooter>

@if (tirage.Status == CebStatus.EnCours) {
    <SfProgressBar ID="progress" Type="ProgressType.Circular" Height="80"
                   IsIndeterminate="true"
                   Value="20" Minimum="0" Maximum="100">
        <ProgressBarAnimation Enable="@(tirage.Status == CebStatus.EnCours)" Duration="100" Delay="0"/>
    </SfProgressBar>
}

@code {
    CebTypeGrille TypeGrille { get; set; }
#pragma warning disable CS8618
    public CebToast toast { get; set; }
    public CebSolutions Solutions { get; set; }
    public static IEnumerable<string> ListePlaques = CebPlaque.AnyPlaques.Select(p => p.ToString());


    protected override void OnInitialized() {
        TypeGrille = CebTypeGrille.Grille;
        base.OnInitialized();
    }

    async Task ResolveAsync() {
        await tirage.ResolveAsync();
        await InvokeAsync(StateHasChanged);
        if (setting.MongoDb)
            await SaveMongoDb();
        await toast.ShowAsync(tirage.Solutions[0]);
    }

    private async Task ShowSolutionAsync(CebBase? sol) {
        await toast.ShowAsync(sol);
    }

    private async Task ExportExcelAsync() {
        await using var mstream = new MemoryStream();
        tirage.ExportExcel(mstream);
        await SaveAsAsync(mstream.ToArray(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "ceb.xlsx");
    }

    private async Task ExportWordAsync() {
        await using var mstream = new MemoryStream();
        tirage.ExportWord(mstream);
        await SaveAsAsync(mstream.ToArray(), "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "ceb.docx");
    }

    private async Task SaveMongoDb() {
        try {
    // Configure the HTTP request pipeline.

            ConventionRegistry.Register("EnumStringConvention",
                new ConventionPack {
                    new EnumRepresentationConvention(BsonType.String)
                },
                _ => true);
            var clientSettings = MongoClientSettings.FromConnectionString(setting.MongoDbConnectionString);
            clientSettings.LinqProvider = LinqProvider.V3;

            var cl = new MongoClient(clientSettings)
                .GetDatabase("ceb")
                .GetCollection<BsonDocument>("comptes");

            await cl.InsertOneAsync(
                new BsonDocument(new Dictionary<string, object> {
                    { "_id", new { lang = "blazor", domain = Environment.GetEnvironmentVariable("USERDOMAIN"), date = DateTime.UtcNow }.ToBsonDocument() }
                })
                    .AddRange(tirage.Data.ToBsonDocument()));
        }
        catch (Exception e) {
            Console.WriteLine(e);
        }
    }

    public async Task SaveAsAsync(byte[]? byteData, string mimeType, string fileName) {
        if (byteData == null) {
            await js.InvokeVoidAsync("alert", "Le fichier à exporter est non défini.");
        }
        else {
            await js.InvokeVoidAsync("saveFile", Convert.ToBase64String(byteData), mimeType, fileName);
        }
    }

}
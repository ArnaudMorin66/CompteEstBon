@page "/"
@using MongoDB.Bson
@using MongoDB.Bson.Serialization.Conventions
@using MongoDB.Driver
@using MongoDB.Driver.Linq
@using System.IO;
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using CompteEstBon

@* ReSharper disable  UnknownCssClass *@
@* ReSharper disable CoercedEqualsUsing *@

@inject IJSRuntime js
@inject CebSetting setting
@inject CebTirage tirage
<div class="sticky-top">
	<div class="btn-toolbar  justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
		<div class="btn-group w-100" role="group" aria-label="First group">
			<span class="btn btn-primary h-100 @(tirage.Status == CebStatus.EnCours ? "disabled" : "") @(tirage.Status != CebStatus.CompteApproche && tirage.Status != CebStatus.CompteEstBon ? "enabled" : "")"
				  @onclick="() => TypeGrille = TypeGrille == CebTypeGrille.Grille ? CebTypeGrille.Liste : CebTypeGrille.Grille"
				  aria-disabled="true"
				  title="@(TypeGrille == CebTypeGrille.Liste ? "Mode Liste" : "Mode Grille")"
				  accesskey="m"
				  role="button"
				  type="button">
				<div class="d-flex justify-content-between">
					<img src="favicon.ico" style="height: 1.5rem;">
					<span class="text-uppercase text-danger font-weight-bold text-wrap text-truncate ">Syncfusion - Compte&nbsp;est&nbsp;bon</span>
					<i class="text-white fas @(TypeGrille == CebTypeGrille.Liste ? "fa-ellipsis-v" : "fa-ellipsis-h") fa-2x"></i>
				</div>
			</span>
		</div>

	</div>
</div>
<div class="row ">
	<div class="col text-center">
		<div class="card text-center border-secondary">
			<div class="card-header bg-primary bg-gradient text-white">
				<i class="fas fa-bars"></i>
				&nbsp;Plaques
			</div>
			<div class="card-body">
				<div class="row">
					@foreach (var plq in tirage.Plaques) {
						<div class="col-md-2">
							<SfComboBox TItem="int"
									TValue="int"
									@bind-Value="plq.Value"
									DataSource="@ListePlaques"
									ShowClearButton="false"
									AllowFiltering="true"
									Enabled="tirage.Status != CebStatus.EnCours">
							</SfComboBox>
						</div>
					}
				</div>

			</div>
		</div>
	</div>
	<div class="col-md-2">
		<div class="card text-center border border-secondary">
			<div class="card-header bg-primary bg-gradient text-white">
				<i class="fas fa-search"></i>
				&nbsp;Trouver
			</div>
			<div class="card-body">
				<SfNumericTextBox @bind-Value="tirage.Search"
								  Max="999"
								  Min="100"
								  CssClass="e-ceb"
								  Format="N0"
								  Step="1"
								  TValue="int"
								  Enabled="tirage.Status != CebStatus.EnCours">
				</SfNumericTextBox>
			</div>
		</div>
	</div>
	<div class="col-md-3  bg-transparent">
		<div class="card bg-transparent border-secondary">
			<div class="card-header btn-group w-100" role="group" aria-label="resolve">
				@switch (tirage.Status) {
					case CebStatus.EnCours:
						<button class="btn btn-info btn-block border border-secondary">
							<i class="fas fa-spinner fa-spin"></i>
							<span class="animation">Patientez&hellip;</span>
						</button>
						break;
					case CebStatus.CompteEstBon:
						<button class="btn btn-success btn-block border border-secondary"
						@onclick="@tirage.ClearAsync"
						title="Initialisation des résultats (ALT-I)"
						role="button"
						type="button"
						accesskey="i">
							<i class="far fa-thumbs-up"></i>
							<span class="animation">Compte&nbsp;est&nbsp;bon</span>
						</button>
						break;
					case CebStatus.CompteApproche:
						<button class="btn btn-secondary btn-block w-100 border border-secondary"
						role="button"
						type="button"
						style="color:wheat"
						title="Initialisation des résultats (ALT-I)"
						@onclick="tirage.ClearAsync"
						accesskey="i">
							<i class="far fa-thumbs-down"></i>
							<span class="animation">Compte&nbsp;approch&eacute;</span>
						</button>
						break;
					case CebStatus.Invalide:
						<button class="btn btn-danger btn-block border border-secondary"
						role="button"
						type="button"
						title="Tirage aléatoire (ALT-T)"
						@onclick="tirage.RandomAsync"
						accesskey="T">
							<i class="fas fa-exclamation-triangle fa-spin"></i>
							<span class="animation">Invalide</span>
						</button>
						break;
					default:
						<button id="resoudre"
						title="Résolution du tirage (ALT-R)"
						class="btn btn-primary btn-block border border-secondary"
						role="button"
						@onclick="ResolveAsync"
						type="button"
						accesskey="r">
							<i class="fas fa-bolt"></i>
							<span>R&eacute;soudre</span>
						</button>
						break;
				}
			</div>
			<div class="card-header btn-group w-100" role="group" aria-label="Action">

				<button id="hasard"
						class="btn btn-primary  border border-secondary w-50 @(tirage.Status == CebStatus.EnCours ? "disabled" : "")"
						accesskey="t"
						title="Tirage aléatoire (ALT-T)"
						role="button"
						type="button"
						@onclick="tirage.RandomAsync">
					<i class="fa fa-random"></i>
					<span>Tirage</span>
				</button>
				<button id="Excel"
						title="Export vers excel (ALT-X)"
						class="btn btn-primary border border-secondary @(tirage.Status is CebStatus.CompteApproche or CebStatus.CompteEstBon  ? "" :"d-none")"
						role="button"
						@onclick="@ExportExcelAsync"
						type="button"
						accesskey="x">
					<i class="fas fa-file-excel"></i>
					<span>Excel</span>
				</button>
				<button id="Word"
						title="Export vers Word (ALT-X)"
						class="btn btn-primary border border-secondary @(tirage.Status is CebStatus.CompteApproche or CebStatus.CompteEstBon  ? "" :"d-none")"
						role="button"
						@onclick="@ExportWordAsync"
						type="button"
						accesskey="w">
					<i class="fas fa-file-word"></i>
					<span>Word</span>
				</button>
			</div>
		</div>
	</div>
</div>
<CebSolutions @ref="Solutions" TypeGrille="TypeGrille"
			  ShowDetail="ShowSolutionAsync">
</CebSolutions>
<div class="card text-center bg-primary bg-gradient border-secondary">
	<div class="card-header">
		<div class="'text-center'">
			@switch (tirage.Status) {
				case CebStatus.EnCours:
					<div class="bg-white" role="alert">
						<i class="fas fa-spinner fa-spin"></i>&nbsp;Patientez, calcul en cours&hellip;
					</div>
					break;
				case CebStatus.Invalide:
					<div class="bg-danger" style="cursor: pointer;" @onclick="@tirage.RandomAsync">
						<i class="fas fa-exclamation-triangle fa-spin"></i>&nbsp;Tirage invalide
					</div>
					break;
				case CebStatus.CompteApproche:
					<div class="bg-secondary" style="cursor: pointer; color: wheat" @onclick="tirage.ClearAsync">
						<i class="text-secondary far fa-thumbs-down"></i>&nbsp;
						&nbsp;Compte approch&eacute;:&nbsp;@tirage.Found,&nbsp;&eacute;cart:&nbsp;@tirage.Diff,&nbsp;@tirage.Count&nbsp;solutions,&nbsp;durée:&nbsp;@($"{tirage.Duree:N3}")&nbsp;s
					</div>
					break;
				case CebStatus.CompteEstBon:
					<div class="bg-success text-white" style="cursor: pointer;" @onclick="@tirage.ClearAsync">
						<i class="far fa-thumbs-up"></i>
						&nbsp;Compte est bon,&nbsp;@(tirage.Count)&nbsp;solutions,&nbsp;durée:&nbsp;@($"{tirage.Duree:N3}")&nbsp;s

					</div>
					break;
				default:
					<div>&nbsp;</div>
					break;
			}
		</div>
	</div>
</div>
<div class="card text-center bg-primary bg-gradient border-secondary">
	<div class="row card-header">
		<div class="col">
			<SfCheckBox @bind-Checked="Auto" Label="Calculer automatiquement" />
		</div>
		<div class="col">
			<SfCheckBox @bind-Checked="MongoDb" Label="Sauvegarder sous MongoDB" />
		</div>
	</div>
</div>
<CebToast @ref="toast" DueTime="10000"></CebToast>
<CebFooter></CebFooter>

@code {
	CebTypeGrille TypeGrille { get; set; } = CebTypeGrille.Grille;
	private bool _auto;
	bool Auto {
		get => _auto;
		set {
			if (_auto == value) return;
			_auto = value;

			if (_auto && tirage.Status == CebStatus.Valide) {
				Task.Run(async () => {
					await tirage.ClearAsync();
					await InvokeAsync(StateHasChanged);
				});
			}
		}
	}
	bool MongoDb { get; set; }
#pragma warning disable CS8618
#pragma warning disable CS8602
	public CebToast? toast { get; set; }
	public CebSolutions? Solutions { get; set; }
	public static IEnumerable<int> ListePlaques = CebPlaque.AnyPlaques.Select(p => p);
	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		tirage.PropertyChanged += async (_, args) => {
			if (!Auto || args.PropertyName != "Clear" || tirage.Status == CebStatus.EnCours) return;
			await ResolveAsync();
			await InvokeAsync(StateHasChanged);
		};
		Auto = setting.AutoCalcul;
		MongoDb = setting.MongoDb;
	}

	async Task ResolveAsync() {
		await tirage.ResolveAsync();
		// await InvokeAsync(StateHasChanged);
		if (tirage.Status is CebStatus.CompteEstBon or CebStatus.CompteApproche) {
			if (MongoDb)
				await SaveMongoDb();
			await toast.ShowAsync(0);
		}
	}

	private async Task ShowSolutionAsync(int index) {
		await toast.ShowAsync(index);
	}

	private async Task ExportExcelAsync() {
		await using var mstream = new MemoryStream();
		tirage.ExportExcel(mstream);
		await js.SaveAsAsync("ceb.xlsx", mstream.ToArray());
	}

	private async Task ExportWordAsync() {
		await using var mstream = new MemoryStream();
		tirage.ExportWord(mstream);
		await js.SaveAsAsync("ceb.docx", mstream.ToArray());
	}

	private async Task SaveMongoDb() {
		try {
			ConventionRegistry.Register("EnumStringConvention",
				new ConventionPack {
					new EnumRepresentationConvention(BsonType.String)
											},
				_ => true);
			var clientSettings = MongoClientSettings.FromConnectionString(setting.MongoDbConnectionString);
			clientSettings.LinqProvider = LinqProvider.V3;

			var cl = new MongoClient(clientSettings)
				.GetDatabase("ceb")
				.GetCollection<BsonDocument>("comptes");

			await cl.InsertOneAsync(
				new BsonDocument(new Dictionary<string, object> {
					{ "_id", new { lang = "blazor", domain = Environment.GetEnvironmentVariable("USERDOMAIN"), date = DateTime.UtcNow }.ToBsonDocument() }
											})
					.AddRange(tirage.Data.ToBsonDocument()));
		} catch (Exception e) {
			Console.WriteLine(e);
		}
	}

}

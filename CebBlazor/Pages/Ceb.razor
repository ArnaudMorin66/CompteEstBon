@page "/"
@using CompteEstBon
@using MongoDB.Bson
@using MongoDB.Bson.Serialization.Conventions
@using MongoDB.Driver
@using MongoDB.Driver.Linq
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs

@inject IJSRuntime js
@inject CebSetting setting
@inject CebTirage tirage

<div class="d-flex justify-content-between align-items-center border border-secondary border-1 rounded m-1 p-1 shadow-lg">
	<img src="favicon.ico" height="32" alt="" class="p-1">
	<div class="text-center text-uppercase text-danger text-wrap text-truncate ">Compte&nbsp;est&nbsp;bon</div>
	<nav aria-label="Page navigation">
		<ul class="pagination mb-2 pt-2 justify-content-center align-middle">
			<li>
				<input class="btn-check" type="checkbox" id="autoCheckbox" @bind-value="Auto" autocomplete="off" accesskey="a">
				<label class="btn  border  @(Auto ? "btn-warning border-dark" : "btn-dark border-warning text-white")  border-1" for="autoCheckbox">Automatique</label>
			</li>
			<li>
				<input class="btn-check" type="checkbox" id="mongoChecked" @bind-value="MongoDb" autocomplete="off" accesskey="m">
				<label class="btn border  @(MongoDb ? "btn-warning border-dark" : "btn-dark border-warning text-white")  border-1" for="mongoChecked">MongoDB</label>
			</li>
			<li>
				<input class="btn-check" type="checkbox" id="vueVertical" @bind-value="VueTable" autocomplete="off" accesskey="v">
				<label class="btn border @(VueTable ? "border-warning btn-dark text-white" : "border-dark btn-warning")  border-1" for="vueVertical" style="width: 7rem">
					<i class="fa-solid fa-ellipsis@(VueTable ? "":"-vertical")"></i>
				</label>
			</li>
		</ul>
	</nav>
</div>
<div class="row">
	<div class="col-md">
		<div class="card text-center border-secondary m-1">
			<div class="card-text bg-primary bg-gradient text-white">
				<div class="fa-regular">
					<i class="fa-1"></i>
					<i class="e-icons e-bullet-1 e-small"></i>
					<i class="fa-2"></i>
					<i class="e-icons e-bullet-1 e-small"></i>
					<i class="fa-3"></i>
				</div>
			</div>
			<div class="card-text p-2">
				<div class="row">
					@foreach (var plq in tirage.Plaques) {
						<div class="col-md-2">
							<SfComboBox TItem="int"
									TValue="int"
									@bind-Value="plq.Value"
									DataSource="@CebPlaque.AnyPlaques"
									ShowClearButton="false"
									AllowFiltering="true"
									Enabled="tirage.Status != CebStatus.EnCours">
							</SfComboBox>
						</div>
					}
				</div>

			</div>
		</div>
	</div>
	<div class="col-md-2 text-center">
		<div class="card text-center border border-secondary m-1">
			<div class="card-text bg-primary bg-gradient text-white">
				<div class="fa-regular">
					<i class="e-icons e-bullet-1 e-small"></i>
					<span>&nbsp;</span>
					<i class="fa-9"></i>
					<i class="fa-8"></i>
					<i class="fa-7"></i>
					<span>&nbsp;</span>
					<i class="e-icons e-bullet-1 e-small"></i>
				</div>
			</div>
			<div class="card-text p-2">
				<SfNumericTextBox @bind-Value="tirage.Search"
								  Max="999"
								  Min="100"
								  Format="N0"
								  Step="1"
								  TValue="int"
								  Enabled="tirage.Status != CebStatus.EnCours">
				</SfNumericTextBox>
			</div>
		</div>
	</div>
</div>

<div class="border border-secondary border-1 rounded m-1 p-1 shadow-lg">
	<div class="row text-center border-secondary border-1 p-2">
		<div class="col " aria-label="resolve">
			@switch (tirage.Status) {
				case CebStatus.EnCours:
					<button class="btn btn-info disabled cursor-wait w-100" role="spinbutton" type="button">
						<i class="fa-solid e-icons e-repeat fa-spin-pulse"></i>
					</button>
					break;
				case CebStatus.CompteEstBon:
					<button class="btn btn-success w-100"
					@onclick="@ClearAsync"
					title="Initialisation des résultats"
					role="button"
					type="button"
					accesskey="i">
						<i class="fa-regular fa-thumbs-up"></i>
						<span class="animation">Compte&nbsp;est&nbsp;bon</span>
					</button>
					break;
				case CebStatus.CompteApproche:
					<button class="btn btn-secondary text-wheat w-100"
					role="button"
					type="button"
					title="Initialisation des résultats"
					@onclick="ClearAsync"
					accesskey="i">
						<i class="fa-regular fa-thumbs-down"></i>
						<span class="animation">Compte&nbsp;approch&eacute;</span>
					</button>
					break;
				case CebStatus.Invalide:
					<button class="btn btn-danger w-100"
					role="button"
					type="button"
					title="Tirage aléatoire"
					@onclick="RandomAsync"
					accesskey="i">
						<i class="fa-solid fa-circle-exclamation fa-beat"></i>
					</button>
					break;
				default:
					<button id="resoudre"
					title="Résolution du tirage"
					class="btn btn-primary w-100"
					role="button"
					@onclick="ResolveAsync"
					type="button"
					accesskey="i">
						<i class="e-icons e-calculated-member" Title="Résoudre le compte"></i>
					</button>
					break;
			}
		</div>
		<div class="col-2">
			<button id="hasard"
					class="btn btn-primary border border-secondary w-100 @(tirage.Status == CebStatus.EnCours ? "disabled" : "")"
					accesskey="h"
					title="Tirage aléatoire"
					role="button"
					type="button"
					@onclick="RandomAsync">
				<i class="fa-solid fa-shuffle"></i>
			</button>
		</div>
		<div class="col-1">
			<button id="Excel"
					title="Export vers excel"
					class="btn btn-primary border w-100 border-secondary @(tirage.Status is CebStatus.CompteApproche or CebStatus.CompteEstBon ? "" : "disabled")"
					role="button"
					@onclick="@(async ()=> await ExportAsync(TypeExport.Excel))"
					type="button"
					accesskey="x">
				<i class="fa-regular fa-file-excel"></i>
			</button>
		</div>
		<div class="col-1">
			<button id="Word"
					title="Export vers Word"
					class="btn btn-primary border border-secondary w-100  @(tirage.Status is CebStatus.CompteApproche or CebStatus.CompteEstBon ? "" : "disabled")"
					role="button"
					@onclick="@(async ()=> await ExportAsync(TypeExport.Word))"
					type="button"
					accesskey="w">
				<i class="fa-regular fa-file-word"></i>
			</button>
		</div>
	</div>
</div>
<CebSolutions VueTable="VueTable" ShowDetail="async (solution) => await toast!.ShowAsync(solution)"></CebSolutions>
<div class="card text-center bg-primary bg-gradient border-secondary mt-1 mb-1">
	<div class="card-header">
		<div class="'text-center'">
			@switch (tirage.Status) {
				case CebStatus.EnCours:
					<div class="bg-info cursor-wait" role="alert">
						<i class="e-icons e-repeat fa-solid fa-spin-pulse"></i>
					</div>
					break;
				case CebStatus.Invalide:
					<div class="bg-danger" style="cursor: pointer;" @onclick="@RandomAsync">
						<i class="fa-solid fa-circle-exclamation fa-beat"></i>&nbsp;Tirage invalide
					</div>
					break;
				case CebStatus.CompteApproche:
					<div class="bg-secondary text-wheat" style="cursor: pointer;" @onclick="ClearAsync">
						<i class="fa-regular fa-thumbs-down"></i>&nbsp;
						&nbsp;Compte approch&eacute;:&nbsp;@tirage.Found,&nbsp;&eacute;cart:&nbsp;@tirage.Diff,&nbsp;@tirage.Count&nbsp;solutions,&nbsp;durée:&nbsp;@($"{tirage.Duree:N3}")&nbsp;s
					</div>
					break;
				case CebStatus.CompteEstBon:
					<div class="bg-success text-black" style="cursor: pointer;" @onclick="ClearAsync">
						<i class="fa-regular fa-thumbs-up"></i>
						&nbsp;Compte est bon,&nbsp;@(tirage.Count)&nbsp;solutions,&nbsp;durée:&nbsp;@($"{tirage.Duree:N3}")&nbsp;s
					</div>
					break;
				default:
					<div>&nbsp;</div>
					break;
			}
		</div>
	</div>
</div>
@*<nav aria-label="Page navigation" class="border border-secondary border-1 rounded text-white">
	<ul class="pagination mb-2 pt-2 justify-content-center align-middle">
		<li>
			<input class="btn-check" type="checkbox" id="autoCheckbox" @bind-value="Auto" autocomplete="off" accesskey="a">
			<label class="btn  @(Auto ? "btn-warning" : "btn-dark text-white") border border-info border-1" for="autoCheckbox">Automatique</label>
		</li>
		<li>
			<input class="btn-check" type="checkbox" id="mongoChecked" @bind-value="MongoDb" autocomplete="off" accesskey="m">
			<label class="btn  @(MongoDb ? "btn-warning" : "btn-dark text-white") border border-info border-1" for="mongoChecked">MongoDB</label>
		</li>
		<li>
			<input class="btn-check" type="checkbox" id="vueVertical" @bind-value="VueTable" autocomplete="off" accesskey="v">
			<label class="btn @(VueTable ? "btn-prinary text-white" : "btn-warning") border border-info border-1" for="vueVertical" style="width: 7rem">
				<i class="fa-solid fa-ellipsis@(VueTable ? "":"-vertical")"></i>
			</label>
		</li>
	</ul>
</nav>*@
<CebFooter></CebFooter>
<CebToast @ref="toast" DueTime="10000"></CebToast>

@code {

	public bool VueTable { get; set; }

	private bool _auto;

	bool Auto {
		get => _auto;
		set {
			if (_auto == value) return;
			_auto = value;
			if (_auto && tirage.Status == CebStatus.Valide) {
				Task.Run(async () => {
					await tirage.ClearAsync();
					await InvokeAsync(StateHasChanged);
				});
			}
		}
	}

	bool MongoDb { get; set; }
#pragma warning disable CS8618
#pragma warning disable CS8602
	public CebToast? toast { get; set; }

	//public CebSolutions? Solutions { get; set; }
	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		tirage.PropertyChanged += async (_, args) => {
			await toast.HideAsync();
			if (!Auto || args.PropertyName != "Clear" || tirage.Status == CebStatus.EnCours) return;
			await ResolveAsync();
			await InvokeAsync(StateHasChanged);
		};
		Auto = setting.AutoCalcul;
		MongoDb = setting.MongoDb;
		VueTable = true;
	}

	async Task RandomAsync() {
		await toast.HideAsync();
		await tirage.RandomAsync();
	}

	async Task ClearAsync() {
		await toast.HideAsync();
		await tirage.ClearAsync();
	}

	async Task ResolveAsync() {
		await toast.HideAsync();
		await tirage.ResolveAsync();
		if (tirage.Status is CebStatus.CompteEstBon or CebStatus.CompteApproche) {
			if (MongoDb)
				await SaveMongoDb();
			await toast.ShowAsync(tirage.Solutions[0]);
		}
	}

	private async Task ExportAsync(TypeExport export) {
		if (tirage.Status is not (CebStatus.CompteEstBon or CebStatus.CompteApproche)) return;
		var filename = "CompteEstBon." + (export == TypeExport.Excel ? "xlsx" : "docx");
		Action<MemoryStream> exportStream = export == TypeExport.Excel ? tirage.ExportExcel : tirage.ExportWord;

		await using var mstream = new MemoryStream();
		exportStream(mstream);
		await js.SaveAsAsync(filename, mstream);
	}

	private async Task SaveMongoDb() {
		try {
			ConventionRegistry.Register("EnumStringConvention",
				new ConventionPack {
					new EnumRepresentationConvention(BsonType.String)
									},
				_ => true);
			var clientSettings = MongoClientSettings.FromConnectionString(setting.MongoDbConnectionString);
			clientSettings.LinqProvider = LinqProvider.V3;

			var cl = new MongoClient(clientSettings)
				.GetDatabase("ceb")
				.GetCollection<BsonDocument>("comptes");

			await cl.InsertOneAsync(
				new BsonDocument(new Dictionary<string, object> {
					{ "_id", new { lang = "blazor", domain = Environment.GetEnvironmentVariable("USERDOMAIN"), date = DateTime.UtcNow }.ToBsonDocument() }
									})
					.AddRange(tirage.Data.ToBsonDocument()));
		} catch (Exception e) {
			Console.WriteLine(e);
		}
	}

}
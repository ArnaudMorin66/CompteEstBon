@page "/"
@using System.Diagnostics
@using CompteEstBon
@inject CebTirage tirage
<div class="sticky-top">
    <div class="btn-toolbar  justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
        <div class="btn-group w-25" role="group" aria-label="First group">
            @* ReSharper disable once CoercedEqualsUsing *@
            <button class="btn btn-primary h-100 @(tirage.Status != CebStatus.CompteApproche && tirage.Status != CebStatus.CompteEstBon ? "enabled" : "")"
                    @onclick="() => TypeGrille = TypeGrille == CebTypeGrille.Grille ? CebTypeGrille.Liste : CebTypeGrille.Grille"
                    aria-disabled="true"
                    title="@(TypeGrille == CebTypeGrille.Liste ? "Mode Liste" : "Mode Grille")"
                    accesskey="m"
                    role="button"
                    type="button">
                <div class="d-flex justify-content-between">
                    <img src="favicon.ico" style="height: 1.5rem;">
                    <cite class="text-uppercase text-danger font-weight-bold text-wrap text-truncate ">Syncfusion - Compte&nbsp;est&nbsp;bon</cite>
                    <i class="text-white fas @(TypeGrille == CebTypeGrille.Liste ? "fa-ellipsis-v" : "fa-ellipsis-h") fa-2x"></i>
                </div>
            </button>
        </div>
        <div class="btn-group w-75" role="group" aria-label="second group">
            @if (tirage.Status != CebStatus.EnCours)
            {
                <button id="hasard"
                        class="btn btn-primary  w-25"
                        accesskey="t"
                        title="Tirage aléatoire (ALT-T)"
                        role="button"
                        type="button"
                        Enabled="@(tirage.Status != CebStatus.EnCours)"
                        @onclick="tirage.RandomAsync">
                    @* ReSharper disable UnknownCssClass *@
                    <i class="fa fa-random"></i>
                    <div>Tirage</div>
                </button>
                @switch (tirage.Status)
                {
                    case CebStatus.CompteEstBon:
                        <button class="btn btn-success btn-block"
                                @onclick="tirage.ClearAsync"
                                title="Initialisation des résultats (ALT-I)"
                                role="button"
                                type="button"
                                accesskey="i">
                            <i class="text-dark far fa-thumbs-up"></i>
                            <div class="animation">Compte&nbsp;est&nbsp;bon</div>
                        </button>
                        break;
                    case CebStatus.CompteApproche:
                        <button class="btn btn-warning btn-block"
                                role="button"
                                type="button"
                                title="Initialisation des résultats (ALT-I)"
                                @onclick="tirage.ClearAsync"
                                accesskey="i">
                            <i class="text-danger far fa-thumbs-down"></i>
                            <div class="animation">Compte&nbsp;approch&eacute;</div>
                        </button>
                        break;
                    case CebStatus.Erreur:
                        <button class="btn btn-danger btn-block"
                                role="button"
                                type="button"
                                title="Tirage aléatoire (ALT-T)"
                                @onclick="tirage.RandomAsync"
                                accesskey="T">
                            <div class="animation">
                                <i class="fas fa-exclamation-triangle"></i>
                                <div class="animation">Tirage&nbsp;invalide</div>

                            </div>
                        </button>
                        break;
                    default:
                        <button id="resoudre"
                                title="Résolution du tirage (ALT-R)"
                                class="btn btn-primary btn-block"
                                role="button"
                                @onclick="@ResolveAsync"
                                type="button"
                                accesskey="r">
                            <i class="fas fa-bolt"></i>
                            <div>R&eacute;soudre</div>
                        </button>
                        break;
                }
                @if (tirage.Status == CebStatus.CompteEstBon || tirage.Status == CebStatus.CompteApproche)
                {
                    <button id="excel"
                            @onclick="@(() => { Solutions.ExportExcel(); })"
                            title="Exportation vers Excel (ALT-X)"
                            accesskey="x"
                            class="btn btn-primary w-25"
                            type="button"
                            role="button">
                        <div>
                            <i class="fas fa-file-excel"></i>
                        </div>
                        <div>Excel</div>
                    </button>
                    <button id="word"
                            @onclick="@(() => { Solutions.ExportWord(); })"
                            title="Exportation vers Word (ALT-W)"
                            accesskey="w"
                            class="btn btn-primary w-25"
                            type="button"
                            role="button">
                        <div>
                            <i class="fas fa-file-word"></i>
                        </div>
                        <div>Word</div>
                    </button>
                }
            }
            else
            {
                <button class="btn btn-info btn-block">
                    <i class="fas fa-spinner fa-spin"></i>
                    <div class="animation">
                        Patientez, calcul en cours&hellip;
                    </div>
                </button>
            }
        </div>
    </div>
</div>
<div class="row ">
    <div class="col text-center">
        <div class="card text-center border-secondary">
            <div class="card-header bg-gradient-dark text-white">
                <i class="fas fa-bars"></i>
                &nbsp;Plaques
            </div>
            <div class="card-body">
                <div class="row">
                    @foreach (var plq in tirage.Plaques)
                    {
                        <div class="col-md-2">
                            <SfComboBox Value="@plq.Value"
                                        DataSource="@CebPlaque.AnyPlaques"
                                        
                                        AllowCustom="true"
                                        ShowClearButton="false"
                                        Enabled="tirage.Status != CebStatus.EnCours">
                            </SfComboBox>
                        </div>
                    }
                </div>

            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center border border-secondary">
            <div class="card-header bg-gradient-dark text-white">
                <i class="fas fa-search"></i>
                &nbsp;Trouver
            </div>
            <div class="card-body">
                <SfNumericTextBox Value="@tirage.Search"
                                  Max="999"
                                  Min="100"
                                 
                                  CssClass="e-ceb"
                                  Format="N0"
                                  Step="1"
                                  TValue="int"
                                  Enabled="tirage.Status != CebStatus.EnCours">
                </SfNumericTextBox>
            </div>
        </div>
    </div>
</div>
<CebSolutions @ref="Solutions" TypeGrille="TypeGrille"  Details="Details" Toast="toast"></CebSolutions>
<div class="text-white text-center font-weight-bold" style="height: 1.8rem;">
    <div class="animation">
        @switch (tirage.Status)
        {
            case CebStatus.EnCours:
                <div class="badge badge-info w-100">
                    <i class="fas fa-spinner fa-spin"></i>&nbsp;Patientez, calcul en cours&hellip;
                </div>
                break;
            case CebStatus.Erreur:
                <div class="badge badge-danger w-100" style="cursor: pointer;" @onclick="tirage.RandomAsync">
                    <i class="fas fa-exclamation-triangle fa-spin"></i>&nbsp;Tirage invalide
                </div>
                break;
            case CebStatus.CompteApproche:
                <div class="badge badge-warning w-100" style="cursor: pointer;" @onclick="tirage.ClearAsync">
                    <div class="text-dark d-flex justify-content-center">
                        <div>
                            <i class="text-danger far fa-thumbs-down"></i>
                        </div>
                        <div>Compte&nbsp;approch&eacute;</div>
                        <div>Trouvé:&nbsp;@tirage.Found</div>
                        <div>@tirage.Solutions.Count()&nbsp;solutions</div>
                        <div>durée:&nbsp;@($"{stopwatch.Elapsed.TotalSeconds:N3}")s</div>
                    </div>
                </div>
                break;
            case CebStatus.CompteEstBon:
                <div class="badge badge-success w-100" style="cursor: pointer;" @onclick="tirage.ClearAsync">
                    <div class="d-flex justify-content-center text-white">
                        <div>
                            <i class="text-dark far fa-thumbs-up"></i>
                        </div>
                        <div>Compte&nbsp;est&nbsp;bon</div>
                        <div>@tirage.Count&nbsp;solutions</div>
                        <div>durée:&nbsp;@($"{stopwatch.Elapsed.TotalSeconds:N3}")s</div>

                    </div>
                </div>
                break;
            default:
                <div class="h-100">&nbsp;</div>
                break;
        }
    </div>
</div>
<CebToast @ref="toast" DueTime="10000" Duree="stopwatch.Elapsed.TotalSeconds"></CebToast>

@code {
    public IEnumerable<CebDetail> Details { get; set; }
    CebTypeGrille TypeGrille { get; set; }
    Stopwatch stopwatch;
    public CebToast toast;
    public CebSolutions Solutions;

    protected override void OnInitialized()
    {
        TypeGrille = CebTypeGrille.Grille;
        stopwatch = new Stopwatch();
        tirage.PropertyChanged += async (sender, e) =>
        {
            Details = new List<CebDetail>(tirage.Solutions);
            await InvokeAsync(StateHasChanged);

        };
        base.OnInitialized();
    }

    protected async Task ClearAsync()
    {
        await tirage.ClearAsync();
    }
    protected async Task RandomAsync()
    {
        await tirage.RandomAsync();
    }

    async Task ResolveAsync()
    {
        //stopwatch.Reset();
        //stopwatch.Start();
        await tirage.ResolveAsync();
        await InvokeAsync(StateHasChanged);
       // stopwatch.Stop();
       // await toast.ShowAsync(0);
    }

}

@using System.Reflection
@using CompteEstBon
@using SelectionType = Syncfusion.Blazor.Grids.SelectionType
@* @inject CebTirage Tirage  *@	
<div class="border border-secondary border-1 rounded bg-primary mb-1 mt-1" style="height: 32rem;" id="grille">
    <SfGrid AllowSelection="true"
    DataSource="Tirage.Solutions"
    EnableAltRow="true"
    GridLines="GridLine.Horizontal"
    Height="100%"
    Width="100%"
    ID="solutions"
    TValue="CebBase">
        <GridEvents OnRecordClick="async data => await ShowDetail.InvokeAsync(data.RowIndex)"
        TValue="CebBase">
        </GridEvents>
        <GridSelectionSettings CellSelectionMode="CellSelectionMode.Box" 
        Type="SelectionType.Single"></GridSelectionSettings>
        <GridTemplates>
            <EmptyRecordTemplate>
                @if (Tirage.Status == CebStatus.EnCours) {
                    <div class="position-absolute top-50 start-50 translate-middle">
                        <SfSpinner Visible=true Type="@SpinnerType.Fluent" Size="100" Label="En cours..."/>
                    </div>
                }
            </EmptyRecordTemplate>
        </GridTemplates>
        <GridColumns>
            @if (VueVerticale) {
            <GridColumn TextAlign="TextAlign.Center">
                <Template Context="data">
                    @{
                        var operations = (data as CebBase)!.Operations;
                        foreach (var operation in operations) {
                            <div>@operation</div>
                        }
                    }
                </Template>
            </GridColumn>
            }
            else {
                @foreach (var prop in new[] { "Op1", "Op2", "Op3", "Op4", "Op5" }) {
                    <GridColumn Field="@prop" TextAlign="TextAlign.Center"></GridColumn>
                }
            }
        </GridColumns>
    </SfGrid>
</div>


@code {

    #pragma warning disable CS8618
    /// <summary>
    /// Tirage ceb
    /// </summary>
    [Parameter]
    public CebTirage Tirage { get; set; }

    /// <summary>
    /// vue des solutions 
    /// </summary>
    [Parameter]
    public bool VueVerticale { get; set; }


    /// <summary>
    /// evenement 
    /// </summary>
    [Parameter]
    public EventCallback<int> ShowDetail { get; set; }

    /// <summary>
    /// Initialisation 
    /// </summary>
    protected override void OnInitialized() {
		VueVerticale = true;
		base.OnInitialized();
	}

}